if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(['../../core/jsgui-lang-essentials', 'fs', '../../image/jsgui-node-png', '../../image/jsgui-node-pixel-buffer',
    '../../image/jsgui-node-pixel-buffer-process', 'assert', '../test-utils/test-utils'], 


    function(jsgui, fs, jsgui_png, Pixel_Buffer, pixel_buffer_processing, assert, test_utils) {
        var stringify = jsgui.stringify, call_multi = jsgui.call_multi;
			
		xdescribe("jsgui-node-png/test-jsgui-node-png.spec.js", function() {
		
			beforeEach(function(){
				process.chdir(__dirname);  
			});
		
			// -----------------------------------------------------
			//	test_load_png_iterate
			// -----------------------------------------------------
				
			it("test_load_png_iterate", function(done) {
			
				//var source_file = './source/pliers2.png';
				//var source_file = './source/f00n2c08.png';
				var source_file = './source/pngsuite/f00n2c08.png';
				
				
				// f00n2c08
				// load up a PNG file.
				//  then iterate through its pixels.
				
				var test_load_png_iterate = function() {
					jsgui_png.load_from_disk(source_file, function(err, png) {
						if (err) {
							throw err;
						} else {
							//console.log('loaded png');							
							// get the pixel at 0, 0.
							
							var estimated = [{x:0,y:0,px:255},{x:1,y:0,px:255},{x:2,y:0,px:255},{x:3,y:0,px:255},{x:4,y:0,px:255},{x:5,y:0,px:255},{x:6,y:0,px:255},{x:7,y:0,px:255},{x:8,y:0,px:255},{x:9,y:0,px:255},{x:10,y:0,px:255},{x:11,y:0,px:255},{x:12,y:0,px:255},{x:13,y:0,px:255},{x:14,y:0,px:255},{x:15,y:0,px:255},{x:16,y:0,px:255},{x:17,y:0,px:255},{x:18,y:0,px:255},{x:19,y:0,px:255},{x:20,y:0,px:255},{x:21,y:0,px:255},{x:22,y:0,px:255},{x:23,y:0,px:255},{x:24,y:0,px:255},{x:25,y:0,px:255},{x:26,y:0,px:255},{x:27,y:0,px:255},{x:28,y:0,px:255},{x:29,y:0,px:255},{x:30,y:0,px:255},{x:31,y:0,px:255},{x:0,y:1,px:238},{x:1,y:1,px:255},{x:2,y:1,px:255},{x:3,y:1,px:255},{x:4,y:1,px:255},{x:5,y:1,px:255},{x:6,y:1,px:255},{x:7,y:1,px:255},{x:8,y:1,px:255},{x:9,y:1,px:255},{x:10,y:1,px:255},{x:11,y:1,px:255},{x:12,y:1,px:255},{x:13,y:1,px:255},{x:14,y:1,px:255},{x:15,y:1,px:255},{x:16,y:1,px:255},{x:17,y:1,px:255},{x:18,y:1,px:255},{x:19,y:1,px:255},{x:20,y:1,px:255},{x:21,y:1,px:255},{x:22,y:1,px:255},{x:23,y:1,px:255},{x:24,y:1,px:255},{x:25,y:1,px:255},{x:26,y:1,px:255},{x:27,y:1,px:255},{x:28,y:1,px:255},{x:29,y:1,px:255},{x:30,y:1,px:255},{x:31,y:1,px:255},{x:0,y:2,px:223},{x:1,y:2,px:238},{x:2,y:2,px:255},{x:3,y:2,px:255},{x:4,y:2,px:255},{x:5,y:2,px:255},{x:6,y:2,px:255},{x:7,y:2,px:255},{x:8,y:2,px:255},{x:9,y:2,px:255},{x:10,y:2,px:255},{x:11,y:2,px:255},{x:12,y:2,px:255},{x:13,y:2,px:255},{x:14,y:2,px:255},{x:15,y:2,px:255},{x:16,y:2,px:255},{x:17,y:2,px:255},{x:18,y:2,px:255},{x:19,y:2,px:255},{x:20,y:2,px:255},{x:21,y:2,px:255},{x:22,y:2,px:255},{x:23,y:2,px:255},{x:24,y:2,px:255},{x:25,y:2,px:255},{x:26,y:2,px:255},{x:27,y:2,px:255},{x:28,y:2,px:255},{x:29,y:2,px:255},{x:30,y:2,px:255},{x:31,y:2,px:255},{x:0,y:3,px:208},{x:1,y:3,px:223},{x:2,y:3,px:238},{x:3,y:3,px:255},{x:4,y:3,px:255},{x:5,y:3,px:255},{x:6,y:3,px:255},{x:7,y:3,px:255},{x:8,y:3,px:255},{x:9,y:3,px:255},{x:10,y:3,px:255},{x:11,y:3,px:255},{x:12,y:3,px:255},{x:13,y:3,px:255},{x:14,y:3,px:255},{x:15,y:3,px:255},{x:16,y:3,px:255},{x:17,y:3,px:255},{x:18,y:3,px:255},{x:19,y:3,px:255},{x:20,y:3,px:255},{x:21,y:3,px:255},{x:22,y:3,px:255},{x:23,y:3,px:255},{x:24,y:3,px:255},{x:25,y:3,px:255},{x:26,y:3,px:255},{x:27,y:3,px:255},{x:28,y:3,px:255},{x:29,y:3,px:255},{x:30,y:3,px:255},{x:31,y:3,px:255},{x:0,y:4,px:193},{x:1,y:4,px:208},{x:2,y:4,px:223},{x:3,y:4,px:238},{x:4,y:4,px:255},{x:5,y:4,px:255},{x:6,y:4,px:255},{x:7,y:4,px:255},{x:8,y:4,px:255},{x:9,y:4,px:255},{x:10,y:4,px:255},{x:11,y:4,px:255},{x:12,y:4,px:255},{x:13,y:4,px:255},{x:14,y:4,px:255},{x:15,y:4,px:255},{x:16,y:4,px:255},{x:17,y:4,px:255},{x:18,y:4,px:255},{x:19,y:4,px:255},{x:20,y:4,px:255},{x:21,y:4,px:255},{x:22,y:4,px:255},{x:23,y:4,px:255},{x:24,y:4,px:255},{x:25,y:4,px:255},{x:26,y:4,px:255},{x:27,y:4,px:255},{x:28,y:4,px:255},{x:29,y:4,px:255},{x:30,y:4,px:255},{x:31,y:4,px:255},{x:0,y:5,px:179},{x:1,y:5,px:193},{x:2,y:5,px:208},{x:3,y:5,px:223},{x:4,y:5,px:238},{x:5,y:5,px:255},{x:6,y:5,px:255},{x:7,y:5,px:255},{x:8,y:5,px:255},{x:9,y:5,px:255},{x:10,y:5,px:255},{x:11,y:5,px:255},{x:12,y:5,px:255},{x:13,y:5,px:255},{x:14,y:5,px:255},{x:15,y:5,px:255},{x:16,y:5,px:255},{x:17,y:5,px:255},{x:18,y:5,px:255},{x:19,y:5,px:255},{x:20,y:5,px:255},{x:21,y:5,px:255},{x:22,y:5,px:255},{x:23,y:5,px:255},{x:24,y:5,px:255},{x:25,y:5,px:255},{x:26,y:5,px:255},{x:27,y:5,px:255},{x:28,y:5,px:255},{x:29,y:5,px:255},{x:30,y:5,px:255},{x:31,y:5,px:255},{x:0,y:6,px:165},{x:1,y:6,px:179},{x:2,y:6,px:193},{x:3,y:6,px:208},{x:4,y:6,px:223},{x:5,y:6,px:238},{x:6,y:6,px:255},{x:7,y:6,px:255},{x:8,y:6,px:255},{x:9,y:6,px:255},{x:10,y:6,px:255},{x:11,y:6,px:255},{x:12,y:6,px:255},{x:13,y:6,px:255},{x:14,y:6,px:255},{x:15,y:6,px:255},{x:16,y:6,px:255},{x:17,y:6,px:255},{x:18,y:6,px:255},{x:19,y:6,px:255},{x:20,y:6,px:255},{x:21,y:6,px:255},{x:22,y:6,px:255},{x:23,y:6,px:255},{x:24,y:6,px:255},{x:25,y:6,px:255},{x:26,y:6,px:255},{x:27,y:6,px:255},{x:28,y:6,px:255},{x:29,y:6,px:255},{x:30,y:6,px:255},{x:31,y:6,px:255},{x:0,y:7,px:152},{x:1,y:7,px:165},{x:2,y:7,px:179},{x:3,y:7,px:193},{x:4,y:7,px:208},{x:5,y:7,px:223},{x:6,y:7,px:238},{x:7,y:7,px:255},{x:8,y:7,px:255},{x:9,y:7,px:255},{x:10,y:7,px:255},{x:11,y:7,px:255},{x:12,y:7,px:255},{x:13,y:7,px:255},{x:14,y:7,px:255},{x:15,y:7,px:255},{x:16,y:7,px:255},{x:17,y:7,px:255},{x:18,y:7,px:255},{x:19,y:7,px:255},{x:20,y:7,px:255},{x:21,y:7,px:255},{x:22,y:7,px:255},{x:23,y:7,px:255},{x:24,y:7,px:255},{x:25,y:7,px:255},{x:26,y:7,px:255},{x:27,y:7,px:255},{x:28,y:7,px:255},{x:29,y:7,px:255},{x:30,y:7,px:255},{x:31,y:7,px:255},{x:0,y:8,px:140},{x:1,y:8,px:152},{x:2,y:8,px:165},{x:3,y:8,px:179},{x:4,y:8,px:193},{x:5,y:8,px:208},{x:6,y:8,px:223},{x:7,y:8,px:238},{x:8,y:8,px:255},{x:9,y:8,px:255},{x:10,y:8,px:255},{x:11,y:8,px:255},{x:12,y:8,px:255},{x:13,y:8,px:0},{x:14,y:8,px:0},{x:15,y:8,px:0},{x:16,y:8,px:0},{x:17,y:8,px:0},{x:18,y:8,px:0},{x:19,y:8,px:255},{x:20,y:8,px:255},{x:21,y:8,px:255},{x:22,y:8,px:255},{x:23,y:8,px:255},{x:24,y:8,px:255},{x:25,y:8,px:255},{x:26,y:8,px:255},{x:27,y:8,px:255},{x:28,y:8,px:255},{x:29,y:8,px:255},{x:30,y:8,px:255},{x:31,y:8,px:255},{x:0,y:9,px:112},{x:1,y:9,px:123},{x:2,y:9,px:134},{x:3,y:9,px:145},{x:4,y:9,px:157},{x:5,y:9,px:169},{x:6,y:9,px:182},{x:7,y:9,px:196},{x:8,y:9,px:209},{x:9,y:9,px:224},{x:10,y:9,px:225},{x:11,y:9,px:226},{x:12,y:9,px:0},{x:13,y:9,px:0},{x:14,y:9,px:0},{x:15,y:9,px:0},{x:16,y:9,px:0},{x:17,y:9,px:0},{x:18,y:9,px:0},{x:19,y:9,px:0},{x:20,y:9,px:235},{x:21,y:9,px:236},{x:22,y:9,px:236},{x:23,y:9,px:238},{x:24,y:9,px:239},{x:25,y:9,px:240},{x:26,y:9,px:240},{x:27,y:9,px:242},{x:28,y:9,px:243},{x:29,y:9,px:243},{x:30,y:9,px:244},{x:31,y:9,px:246},{x:0,y:10,px:88},{x:1,y:10,px:96},{x:2,y:10,px:105},{x:3,y:10,px:115},{x:4,y:10,px:124},{x:5,y:10,px:135},{x:6,y:10,px:145},{x:7,y:10,px:156},{x:8,y:10,px:168},{x:9,y:10,px:179},{x:10,y:10,px:192},{x:11,y:10,px:0},{x:12,y:10,px:0},{x:13,y:10,px:0},{x:14,y:10,px:200},{x:15,y:10,px:202},{x:16,y:10,px:204},{x:17,y:10,px:206},{x:18,y:10,px:0},{x:19,y:10,px:0},{x:20,y:10,px:0},{x:21,y:10,px:214},{x:22,y:10,px:216},{x:23,y:10,px:218},{x:24,y:10,px:220},{x:25,y:10,px:222},{x:26,y:10,px:224},{x:27,y:10,px:226},{x:28,y:10,px:228},{x:29,y:10,px:230},{x:30,y:10,px:232},{x:31,y:10,px:234},{x:0,y:11,px:66},{x:1,y:11,px:73},{x:2,y:11,px:80},{x:3,y:11,px:88},{x:4,y:11,px:95},{x:5,y:11,px:104},{x:6,y:11,px:112},{x:7,y:11,px:121},{x:8,y:11,px:130},{x:9,y:11,px:140},{x:10,y:11,px:149},{x:11,y:11,px:0},{x:12,y:11,px:0},{x:13,y:11,px:166},{x:14,y:11,px:169},{x:15,y:11,px:172},{x:16,y:11,px:175},{x:17,y:11,px:178},{x:18,y:11,px:181},{x:19,y:11,px:0},{x:20,y:11,px:0},{x:21,y:11,px:190},{x:22,y:11,px:193},{x:23,y:11,px:196},{x:24,y:11,px:199},{x:25,y:11,px:202},{x:26,y:11,px:205},{x:27,y:11,px:209},{x:28,y:11,px:212},{x:29,y:11,px:215},{x:30,y:11,px:218},{x:31,y:11,px:221},{x:0,y:12,px:48},{x:1,y:12,px:53},{x:2,y:12,px:58},{x:3,y:12,px:64},{x:4,y:12,px:70},{x:5,y:12,px:76},{x:6,y:12,px:83},{x:7,y:12,px:90},{x:8,y:12,px:97},{x:9,y:12,px:104},{x:10,y:12,px:112},{x:11,y:12,px:0},{x:12,y:12,px:0},{x:13,y:12,px:132},{x:14,y:12,px:136},{x:15,y:12,px:140},{x:16,y:12,px:144},{x:17,y:12,px:148},{x:18,y:12,px:0},{x:19,y:12,px:0},{x:20,y:12,px:0},{x:21,y:12,px:164},{x:22,y:12,px:168},{x:23,y:12,px:173},{x:24,y:12,px:177},{x:25,y:12,px:181},{x:26,y:12,px:185},{x:27,y:12,px:189},{x:28,y:12,px:193},{x:29,y:12,px:197},{x:30,y:12,px:201},{x:31,y:12,px:205},{x:0,y:13,px:32},{x:1,y:13,px:36},{x:2,y:13,px:39},{x:3,y:13,px:44},{x:4,y:13,px:48},{x:5,y:13,px:52},{x:6,y:13,px:57},{x:7,y:13,px:62},{x:8,y:13,px:67},{x:9,y:13,px:72},{x:10,y:13,px:78},{x:11,y:13,px:0},{x:12,y:13,px:0},{x:13,y:13,px:96},{x:14,y:13,px:101},{x:15,y:13,px:106},{x:16,y:13,px:111},{x:17,y:13,px:0},{x:18,y:13,px:0},{x:19,y:13,px:0},{x:20,y:13,px:0},{x:21,y:13,px:137},{x:22,y:13,px:142},{x:23,y:13,px:147},{x:24,y:13,px:152},{x:25,y:13,px:157},{x:26,y:13,px:162},{x:27,y:13,px:167},{x:28,y:13,px:172},{x:29,y:13,px:178},{x:30,y:13,px:183},{x:31,y:13,px:188},{x:0,y:14,px:19},{x:1,y:14,px:21},{x:2,y:14,px:24},{x:3,y:14,px:26},{x:4,y:14,px:29},{x:5,y:14,px:32},{x:6,y:14,px:35},{x:7,y:14,px:38},{x:8,y:14,px:41},{x:9,y:14,px:45},{x:10,y:14,px:48},{x:11,y:14,px:0},{x:12,y:14,px:0},{x:13,y:14,px:59},{x:14,y:14,px:64},{x:15,y:14,px:70},{x:16,y:14,px:0},{x:17,y:14,px:0},{x:18,y:14,px:0},{x:19,y:14,px:0},{x:20,y:14,px:0},{x:21,y:14,px:107},{x:22,y:14,px:113},{x:23,y:14,px:119},{x:24,y:14,px:125},{x:25,y:14,px:131},{x:26,y:14,px:137},{x:27,y:14,px:144},{x:28,y:14,px:150},{x:29,y:14,px:156},{x:30,y:14,px:162},{x:31,y:14,px:168},{x:0,y:15,px:8},{x:1,y:15,px:9},{x:2,y:15,px:10},{x:3,y:15,px:12},{x:4,y:15,px:13},{x:5,y:15,px:14},{x:6,y:15,px:16},{x:7,y:15,px:17},{x:8,y:15,px:19},{x:9,y:15,px:20},{x:10,y:15,px:22},{x:11,y:15,px:0},{x:12,y:15,px:0},{x:13,y:15,px:28},{x:14,y:15,px:29},{x:15,y:15,px:0},{x:16,y:15,px:0},{x:17,y:15,px:0},{x:18,y:15,px:53},{x:19,y:15,px:0},{x:20,y:15,px:0},{x:21,y:15,px:75},{x:22,y:15,px:82},{x:23,y:15,px:89},{x:24,y:15,px:96},{x:25,y:15,px:103},{x:26,y:15,px:111},{x:27,y:15,px:118},{x:28,y:15,px:125},{x:29,y:15,px:132},{x:30,y:15,px:139},{x:31,y:15,px:147},{x:0,y:16,px:0},{x:1,y:16,px:1},{x:2,y:16,px:1},{x:3,y:16,px:1},{x:4,y:16,px:1},{x:5,y:16,px:1},{x:6,y:16,px:1},{x:7,y:16,px:2},{x:8,y:16,px:2},{x:9,y:16,px:2},{x:10,y:16,px:2},{x:11,y:16,px:0},{x:12,y:16,px:0},{x:13,y:16,px:3},{x:14,y:16,px:0},{x:15,y:16,px:0},{x:16,y:16,px:0},{x:17,y:16,px:12},{x:18,y:16,px:20},{x:19,y:16,px:0},{x:20,y:16,px:0},{x:21,y:16,px:44},{x:22,y:16,px:52},{x:23,y:16,px:60},{x:24,y:16,px:68},{x:25,y:16,px:76},{x:26,y:16,px:84},{x:27,y:16,px:93},{x:28,y:16,px:101},{x:29,y:16,px:109},{x:30,y:16,px:117},{x:31,y:16,px:125},{x:0,y:17,px:0},{x:1,y:17,px:0},{x:2,y:17,px:1},{x:3,y:17,px:1},{x:4,y:17,px:1},{x:5,y:17,px:1},{x:6,y:17,px:1},{x:7,y:17,px:1},{x:8,y:17,px:2},{x:9,y:17,px:2},{x:10,y:17,px:2},{x:11,y:17,px:0},{x:12,y:17,px:0},{x:13,y:17,px:0},{x:14,y:17,px:0},{x:15,y:17,px:0},{x:16,y:17,px:3},{x:17,y:17,px:4},{x:18,y:17,px:12},{x:19,y:17,px:0},{x:20,y:17,px:0},{x:21,y:17,px:36},{x:22,y:17,px:44},{x:23,y:17,px:52},{x:24,y:17,px:60},{x:25,y:17,px:68},{x:26,y:17,px:76},{x:27,y:17,px:84},{x:28,y:17,px:93},{x:29,y:17,px:101},{x:30,y:17,px:109},{x:31,y:17,px:117},{x:0,y:18,px:0},{x:1,y:18,px:0},{x:2,y:18,px:0},{x:3,y:18,px:0},{x:4,y:18,px:0},{x:5,y:18,px:1},{x:6,y:18,px:1},{x:7,y:18,px:1},{x:8,y:18,px:1},{x:9,y:18,px:1},{x:10,y:18,px:1},{x:11,y:18,px:0},{x:12,y:18,px:0},{x:13,y:18,px:0},{x:14,y:18,px:0},{x:15,y:18,px:2},{x:16,y:18,px:2},{x:17,y:18,px:2},{x:18,y:18,px:3},{x:19,y:18,px:0},{x:20,y:18,px:0},{x:21,y:18,px:27},{x:22,y:18,px:35},{x:23,y:18,px:43},{x:24,y:18,px:51},{x:25,y:18,px:59},{x:26,y:18,px:68},{x:27,y:18,px:76},{x:28,y:18,px:84},{x:29,y:18,px:92},{x:30,y:18,px:100},{x:31,y:18,px:108},{x:0,y:19,px:0},{x:1,y:19,px:0},{x:2,y:19,px:0},{x:3,y:19,px:0},{x:4,y:19,px:0},{x:5,y:19,px:0},{x:6,y:19,px:1},{x:7,y:19,px:1},{x:8,y:19,px:1},{x:9,y:19,px:1},{x:10,y:19,px:1},{x:11,y:19,px:0},{x:12,y:19,px:0},{x:13,y:19,px:0},{x:14,y:19,px:2},{x:15,y:19,px:2},{x:16,y:19,px:2},{x:17,y:19,px:2},{x:18,y:19,px:2},{x:19,y:19,px:0},{x:20,y:19,px:0},{x:21,y:19,px:19},{x:22,y:19,px:27},{x:23,y:19,px:35},{x:24,y:19,px:43},{x:25,y:19,px:51},{x:26,y:19,px:59},{x:27,y:19,px:68},{x:28,y:19,px:76},{x:29,y:19,px:84},{x:30,y:19,px:92},{x:31,y:19,px:100},{x:0,y:20,px:0},{x:1,y:20,px:0},{x:2,y:20,px:0},{x:3,y:20,px:0},{x:4,y:20,px:0},{x:5,y:20,px:0},{x:6,y:20,px:0},{x:7,y:20,px:1},{x:8,y:20,px:1},{x:9,y:20,px:1},{x:10,y:20,px:1},{x:11,y:20,px:0},{x:12,y:20,px:0},{x:13,y:20,px:1},{x:14,y:20,px:1},{x:15,y:20,px:2},{x:16,y:20,px:2},{x:17,y:20,px:2},{x:18,y:20,px:2},{x:19,y:20,px:0},{x:20,y:20,px:0},{x:21,y:20,px:11},{x:22,y:20,px:19},{x:23,y:20,px:27},{x:24,y:20,px:35},{x:25,y:20,px:43},{x:26,y:20,px:51},{x:27,y:20,px:59},{x:28,y:20,px:68},{x:29,y:20,px:76},{x:30,y:20,px:84},{x:31,y:20,px:92},{x:0,y:21,px:0},{x:1,y:21,px:0},{x:2,y:21,px:0},{x:3,y:21,px:0},{x:4,y:21,px:0},{x:5,y:21,px:0},{x:6,y:21,px:0},{x:7,y:21,px:0},{x:8,y:21,px:1},{x:9,y:21,px:1},{x:10,y:21,px:1},{x:11,y:21,px:0},{x:12,y:21,px:0},{x:13,y:21,px:0},{x:14,y:21,px:1},{x:15,y:21,px:1},{x:16,y:21,px:2},{x:17,y:21,px:2},{x:18,y:21,px:0},{x:19,y:21,px:0},{x:20,y:21,px:0},{x:21,y:21,px:3},{x:22,y:21,px:11},{x:23,y:21,px:19},{x:24,y:21,px:27},{x:25,y:21,px:35},{x:26,y:21,px:43},{x:27,y:21,px:51},{x:28,y:21,px:59},{x:29,y:21,px:68},{x:30,y:21,px:76},{x:31,y:21,px:84},{x:0,y:22,px:0},{x:1,y:22,px:0},{x:2,y:22,px:0},{x:3,y:22,px:0},{x:4,y:22,px:0},{x:5,y:22,px:0},{x:6,y:22,px:0},{x:7,y:22,px:0},{x:8,y:22,px:0},{x:9,y:22,px:0},{x:10,y:22,px:0},{x:11,y:22,px:0},{x:12,y:22,px:0},{x:13,y:22,px:0},{x:14,y:22,px:0},{x:15,y:22,px:0},{x:16,y:22,px:0},{x:17,y:22,px:0},{x:18,y:22,px:0},{x:19,y:22,px:0},{x:20,y:22,px:1},{x:21,y:22,px:1},{x:22,y:22,px:2},{x:23,y:22,px:10},{x:24,y:22,px:18},{x:25,y:22,px:26},{x:26,y:22,px:34},{x:27,y:22,px:42},{x:28,y:22,px:50},{x:29,y:22,px:59},{x:30,y:22,px:67},{x:31,y:22,px:75},{x:0,y:23,px:0},{x:1,y:23,px:0},{x:2,y:23,px:0},{x:3,y:23,px:0},{x:4,y:23,px:0},{x:5,y:23,px:0},{x:6,y:23,px:0},{x:7,y:23,px:0},{x:8,y:23,px:0},{x:9,y:23,px:0},{x:10,y:23,px:0},{x:11,y:23,px:0},{x:12,y:23,px:0},{x:13,y:23,px:0},{x:14,y:23,px:0},{x:15,y:23,px:0},{x:16,y:23,px:0},{x:17,y:23,px:0},{x:18,y:23,px:0},{x:19,y:23,px:1},{x:20,y:23,px:1},{x:21,y:23,px:1},{x:22,y:23,px:1},{x:23,y:23,px:2},{x:24,y:23,px:10},{x:25,y:23,px:18},{x:26,y:23,px:26},{x:27,y:23,px:34},{x:28,y:23,px:42},{x:29,y:23,px:50},{x:30,y:23,px:59},{x:31,y:23,px:67},{x:0,y:24,px:0},{x:1,y:24,px:0},{x:2,y:24,px:0},{x:3,y:24,px:0},{x:4,y:24,px:0},{x:5,y:24,px:0},{x:6,y:24,px:0},{x:7,y:24,px:0},{x:8,y:24,px:0},{x:9,y:24,px:0},{x:10,y:24,px:0},{x:11,y:24,px:0},{x:12,y:24,px:0},{x:13,y:24,px:0},{x:14,y:24,px:0},{x:15,y:24,px:1},{x:16,y:24,px:1},{x:17,y:24,px:1},{x:18,y:24,px:1},{x:19,y:24,px:1},{x:20,y:24,px:1},{x:21,y:24,px:1},{x:22,y:24,px:1},{x:23,y:24,px:1},{x:24,y:24,px:2},{x:25,y:24,px:10},{x:26,y:24,px:18},{x:27,y:24,px:26},{x:28,y:24,px:34},{x:29,y:24,px:42},{x:30,y:24,px:50},{x:31,y:24,px:59},{x:0,y:25,px:0},{x:1,y:25,px:0},{x:2,y:25,px:0},{x:3,y:25,px:0},{x:4,y:25,px:0},{x:5,y:25,px:0},{x:6,y:25,px:0},{x:7,y:25,px:0},{x:8,y:25,px:0},{x:9,y:25,px:0},{x:10,y:25,px:0},{x:11,y:25,px:0},{x:12,y:25,px:0},{x:13,y:25,px:0},{x:14,y:25,px:0},{x:15,y:25,px:0},{x:16,y:25,px:0},{x:17,y:25,px:0},{x:18,y:25,px:0},{x:19,y:25,px:0},{x:20,y:25,px:0},{x:21,y:25,px:0},{x:22,y:25,px:0},{x:23,y:25,px:0},{x:24,y:25,px:0},{x:25,y:25,px:1},{x:26,y:25,px:9},{x:27,y:25,px:17},{x:28,y:25,px:25},{x:29,y:25,px:33},{x:30,y:25,px:41},{x:31,y:25,px:50},{x:0,y:26,px:0},{x:1,y:26,px:0},{x:2,y:26,px:0},{x:3,y:26,px:0},{x:4,y:26,px:0},{x:5,y:26,px:0},{x:6,y:26,px:0},{x:7,y:26,px:0},{x:8,y:26,px:0},{x:9,y:26,px:0},{x:10,y:26,px:0},{x:11,y:26,px:0},{x:12,y:26,px:0},{x:13,y:26,px:0},{x:14,y:26,px:0},{x:15,y:26,px:0},{x:16,y:26,px:0},{x:17,y:26,px:0},{x:18,y:26,px:0},{x:19,y:26,px:0},{x:20,y:26,px:0},{x:21,y:26,px:0},{x:22,y:26,px:0},{x:23,y:26,px:0},{x:24,y:26,px:0},{x:25,y:26,px:0},{x:26,y:26,px:1},{x:27,y:26,px:9},{x:28,y:26,px:17},{x:29,y:26,px:25},{x:30,y:26,px:33},{x:31,y:26,px:41},{x:0,y:27,px:0},{x:1,y:27,px:0},{x:2,y:27,px:0},{x:3,y:27,px:0},{x:4,y:27,px:0},{x:5,y:27,px:0},{x:6,y:27,px:0},{x:7,y:27,px:0},{x:8,y:27,px:0},{x:9,y:27,px:0},{x:10,y:27,px:0},{x:11,y:27,px:0},{x:12,y:27,px:0},{x:13,y:27,px:0},{x:14,y:27,px:0},{x:15,y:27,px:0},{x:16,y:27,px:0},{x:17,y:27,px:0},{x:18,y:27,px:0},{x:19,y:27,px:0},{x:20,y:27,px:0},{x:21,y:27,px:0},{x:22,y:27,px:0},{x:23,y:27,px:0},{x:24,y:27,px:0},{x:25,y:27,px:0},{x:26,y:27,px:0},{x:27,y:27,px:1},{x:28,y:27,px:9},{x:29,y:27,px:17},{x:30,y:27,px:25},{x:31,y:27,px:33},{x:0,y:28,px:0},{x:1,y:28,px:0},{x:2,y:28,px:0},{x:3,y:28,px:0},{x:4,y:28,px:0},{x:5,y:28,px:0},{x:6,y:28,px:0},{x:7,y:28,px:0},{x:8,y:28,px:0},{x:9,y:28,px:0},{x:10,y:28,px:0},{x:11,y:28,px:0},{x:12,y:28,px:0},{x:13,y:28,px:0},{x:14,y:28,px:0},{x:15,y:28,px:0},{x:16,y:28,px:0},{x:17,y:28,px:0},{x:18,y:28,px:0},{x:19,y:28,px:0},{x:20,y:28,px:0},{x:21,y:28,px:0},{x:22,y:28,px:0},{x:23,y:28,px:0},{x:24,y:28,px:0},{x:25,y:28,px:0},{x:26,y:28,px:0},{x:27,y:28,px:0},{x:28,y:28,px:1},{x:29,y:28,px:9},{x:30,y:28,px:17},{x:31,y:28,px:25},{x:0,y:29,px:0},{x:1,y:29,px:0},{x:2,y:29,px:0},{x:3,y:29,px:0},{x:4,y:29,px:0},{x:5,y:29,px:0},{x:6,y:29,px:0},{x:7,y:29,px:0},{x:8,y:29,px:0},{x:9,y:29,px:0},{x:10,y:29,px:0},{x:11,y:29,px:0},{x:12,y:29,px:0},{x:13,y:29,px:0},{x:14,y:29,px:0},{x:15,y:29,px:0},{x:16,y:29,px:0},{x:17,y:29,px:0},{x:18,y:29,px:0},{x:19,y:29,px:0},{x:20,y:29,px:0},{x:21,y:29,px:0},{x:22,y:29,px:0},{x:23,y:29,px:0},{x:24,y:29,px:0},{x:25,y:29,px:0},{x:26,y:29,px:0},{x:27,y:29,px:0},{x:28,y:29,px:0},{x:29,y:29,px:0},{x:30,y:29,px:8},{x:31,y:29,px:16},{x:0,y:30,px:0},{x:1,y:30,px:0},{x:2,y:30,px:0},{x:3,y:30,px:0},{x:4,y:30,px:0},{x:5,y:30,px:0},{x:6,y:30,px:0},{x:7,y:30,px:0},{x:8,y:30,px:0},{x:9,y:30,px:0},{x:10,y:30,px:0},{x:11,y:30,px:0},{x:12,y:30,px:0},{x:13,y:30,px:0},{x:14,y:30,px:0},{x:15,y:30,px:0},{x:16,y:30,px:0},{x:17,y:30,px:0},{x:18,y:30,px:0},{x:19,y:30,px:0},{x:20,y:30,px:0},{x:21,y:30,px:0},{x:22,y:30,px:0},{x:23,y:30,px:0},{x:24,y:30,px:0},{x:25,y:30,px:0},{x:26,y:30,px:0},{x:27,y:30,px:0},{x:28,y:30,px:0},{x:29,y:30,px:0},{x:30,y:30,px:0},{x:31,y:30,px:8},{x:0,y:31,px:0},{x:1,y:31,px:0},{x:2,y:31,px:0},{x:3,y:31,px:0},{x:4,y:31,px:0},{x:5,y:31,px:0},{x:6,y:31,px:0},{x:7,y:31,px:0},{x:8,y:31,px:0},{x:9,y:31,px:0},{x:10,y:31,px:0},{x:11,y:31,px:0},{x:12,y:31,px:0},{x:13,y:31,px:0},{x:14,y:31,px:0},{x:15,y:31,px:0},{x:16,y:31,px:0},{x:17,y:31,px:0},{x:18,y:31,px:0},{x:19,y:31,px:0},{x:20,y:31,px:0},{x:21,y:31,px:0},{x:22,y:31,px:0},{x:23,y:31,px:0},{x:24,y:31,px:0},{x:25,y:31,px:0},{x:26,y:31,px:0},{x:27,y:31,px:0},{x:28,y:31,px:0},{x:29,y:31,px:0},{x:30,y:31,px:0},{x:31,y:31,px:0}];
							var index = 0;
														
							png.iterate_pixels(function(x, y, px) {
								//console.log('x ' + x + ', y ' + y + ', px ' + px);
								assert.equal(x, estimated[index].x);
								assert.equal(y, estimated[index].y);
								assert.equal(px, estimated[index].px);
								index++;
							});
							assert.equal(index, estimated.length);						
							done();
						}
					})
				}
				test_load_png_iterate();
			});
						
			
			// -----------------------------------------------------
			//	f02n2c08.png
			// -----------------------------------------------------
				
			xit("f02n2c08.png", function(done) {
			
				jsgui_png.load_pixel_buffer_from_disk('./source/pngsuite/f02n2c08.png', function(err, pix_buf) {
					if (err) {
						throw err;
					} else {
						console.log('loaded rgba pixel buffer');
						console.log('buffer resolution: ' + stringify(pix_buf.size));
						
						var dest_path = './res/f02n2c08.png';
						jsgui_png.save_pixel_buffer_to_disk(pix_buf, dest_path, function(err, res) {
							console.log('save callback');
							if (err) {
								throw err;
							}else{
								test_utils.assertFilesEqual(dest_path, dest_path.replace("/res/", "/res_estimated/"));
								done();
							}
						});
					}
				
				});
			});
			
			// -----------------------------------------------------
			//	test_load_pngs_to_rgba_buffer_save_as_png
			// -----------------------------------------------------

			var load_png_to_rgba_buffer_save_as_png = function(source_path, dest_path, estimated_source_resolution, callback) {					
				jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, pix_buf) {
					if (err) {
						throw err;
					} else {
						//console.log('loaded rgba pixel buffer');
						//console.log('buffer resolution: ' + stringify(pix_buf.size));
						assert.equal(stringify(pix_buf.size), estimated_source_resolution);
						
						jsgui_png.save_pixel_buffer_to_disk(pix_buf, dest_path, function(err, res) {
							//console.log('save callback');
							if (err) {
								throw err;
							}else{
								test_utils.assertFilesEqual(dest_path, dest_path.replace("/res/", "/res_estimated/"));
							}
							
							callback(null, true);
						});
					}
				
				});					
			}

			
			xit("test_load_pngs_to_rgba_buffer_save_as_png", function(done) {
			
				// want to execute the same test on a bunch of items.
				
				
				
				var test_load_pngs_to_rgba_buffer_save_as_png = function() {
					
					//var source_path = './source/pngsuite/f00n2c08.png';
					//var dest_path = './res/f00n2c08.png';
					
					//load_png_to_rgba_buffer_save_as_png(source_path, dest_path);
					
					var fns = [];
					
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/pngsuite/f00n2c08.png', './res/f00n2c08.png', '[32, 32]']]);
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/pngsuite/f01n2c08.png', './res/f01n2c08.png', '[32, 32]']]);
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/pngsuite/f02n2c08.png', './res/f02n2c08.png', '[32, 32]']]); // it fails!!!!!
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/pngsuite/f03n2c08.png', './res/f03n2c08.png', '[32, 32]']]);
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/pngsuite/f04n2c08.png', './res/f04n2c08.png', '[32, 32]']]);
					
					// want to try loading it to an rgba buffer, saving it as a bitmap.
					
					
					
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/pliers2.png', './res/pliers.png', '[244, 194]']]);
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/dice.png', './res/dice.png', '[935, 453]']]);
					
					//console.log('pre call multi');
					
					call_multi(fns, function(err, res_multi) {
						done();
					});
				}
				test_load_pngs_to_rgba_buffer_save_as_png();
			});
						
			// -----------------------------------------------------
			//	test_load_dice_png_to_rgba_buffer_save_as_png
			// -----------------------------------------------------
				
			it("test_load_dice_png_to_rgba_buffer_save_as_png", function(done) {
			
				var test_load_dice_png_to_rgba_buffer_save_as_png = function() {
					
					//var source_path = './source/pngsuite/f00n2c08.png';
					//var dest_path = './res/f00n2c08.png';
					
					//load_png_to_rgba_buffer_save_as_png(source_path, dest_path);
					
					var fns = [];
					
					
					fns.push([load_png_to_rgba_buffer_save_as_png, ['./source/dice.png', './res/dice.png', '[935, 453]']]);
					
					//console.log('pre call multi');
					
					call_multi(fns, function(err, res_multi) {
						test_utils.assertFilesEqual('./res/dice.png', './res_estimated/dice.png');
						done();
					});
				}
				test_load_dice_png_to_rgba_buffer_save_as_png();
			});
						
			// -----------------------------------------------------
			//	test_load_png_with_scanline_filter_2
			// -----------------------------------------------------
				
			it("test_load_png_with_scanline_filter_2", function(done) {
			
				var test_load_png_with_scanline_filter_2 = function() {
					// scanline filter 1 is the add filter.
				
					//var source_path = __dirpath + '/source/gradient24.png';
					var source_path = './source/pngsuite/f02n2c08.png';
					//f01n2c08.png
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
							throw err;
						} else {
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
							
							//console.log('size ' + stringify(size));
							//console.log('scanline_length ' + stringify(png.scanline_length));
							//console.log('color_type ' + stringify(color_type));
							//console.log('bit_depth ' + stringify(bit_depth));							
							assert.deepEqual(size, [32, 32]);
							assert.equal(png.scanline_length, 97);
							assert.equal(color_type, 2);
							assert.equal(bit_depth, 8);
							
							var estimated_pixels = "[{x:0,y:0,c:239},{x:1,y:0,c:239},{x:2,y:0,c:239},{x:3,y:0,c:239},{x:4,y:0,c:239},{x:5,y:0,c:239},{x:6,y:0,c:239},{x:7,y:0,c:239},{x:8,y:0,c:239},{x:9,y:0,c:239},{x:10,y:0,c:239},{x:11,y:0,c:239},{x:12,y:0,c:239},{x:13,y:0,c:239},{x:14,y:0,c:239},{x:15,y:0,c:239},{x:16,y:0,c:239},{x:17,y:0,c:239},{x:18,y:0,c:239},{x:19,y:0,c:239},{x:20,y:0,c:239},{x:21,y:0,c:239},{x:22,y:0,c:239},{x:23,y:0,c:239},{x:24,y:0,c:239},{x:25,y:0,c:239},{x:26,y:0,c:239},{x:27,y:0,c:239},{x:28,y:0,c:239},{x:29,y:0,c:239},{x:30,y:0,c:239},{x:31,y:0,c:239},{x:0,y:1,c:222},{x:1,y:1,c:239},{x:2,y:1,c:239},{x:3,y:1,c:239},{x:4,y:1,c:239},{x:5,y:1,c:239},{x:6,y:1,c:239},{x:7,y:1,c:239},{x:8,y:1,c:239},{x:9,y:1,c:239},{x:10,y:1,c:239},{x:11,y:1,c:239},{x:12,y:1,c:239},{x:13,y:1,c:239},{x:14,y:1,c:239},{x:15,y:1,c:239},{x:16,y:1,c:239},{x:17,y:1,c:239},{x:18,y:1,c:239},{x:19,y:1,c:239},{x:20,y:1,c:239},{x:21,y:1,c:239},{x:22,y:1,c:239},{x:23,y:1,c:239},{x:24,y:1,c:239},{x:25,y:1,c:239},{x:26,y:1,c:239},{x:27,y:1,c:239},{x:28,y:1,c:239},{x:29,y:1,c:239},{x:30,y:1,c:239},{x:31,y:1,c:239},{x:0,y:2,c:207},{x:1,y:2,c:222},{x:2,y:2,c:239},{x:3,y:2,c:239},{x:4,y:2,c:239},{x:5,y:2,c:239},{x:6,y:2,c:239},{x:7,y:2,c:239},{x:8,y:2,c:239},{x:9,y:2,c:239},{x:10,y:2,c:239},{x:11,y:2,c:239},{x:12,y:2,c:239},{x:13,y:2,c:239},{x:14,y:2,c:239},{x:15,y:2,c:239},{x:16,y:2,c:239},{x:17,y:2,c:239},{x:18,y:2,c:239},{x:19,y:2,c:239},{x:20,y:2,c:239},{x:21,y:2,c:239},{x:22,y:2,c:239},{x:23,y:2,c:239},{x:24,y:2,c:239},{x:25,y:2,c:239},{x:26,y:2,c:239},{x:27,y:2,c:239},{x:28,y:2,c:239},{x:29,y:2,c:239},{x:30,y:2,c:239},{x:31,y:2,c:239},{x:0,y:3,c:192},{x:1,y:3,c:207},{x:2,y:3,c:222},{x:3,y:3,c:239},{x:4,y:3,c:239},{x:5,y:3,c:239},{x:6,y:3,c:239},{x:7,y:3,c:239},{x:8,y:3,c:239},{x:9,y:3,c:239},{x:10,y:3,c:239},{x:11,y:3,c:239},{x:12,y:3,c:239},{x:13,y:3,c:239},{x:14,y:3,c:239},{x:15,y:3,c:239},{x:16,y:3,c:239},{x:17,y:3,c:239},{x:18,y:3,c:239},{x:19,y:3,c:239},{x:20,y:3,c:239},{x:21,y:3,c:239},{x:22,y:3,c:239},{x:23,y:3,c:239},{x:24,y:3,c:239},{x:25,y:3,c:239},{x:26,y:3,c:239},{x:27,y:3,c:239},{x:28,y:3,c:239},{x:29,y:3,c:239},{x:30,y:3,c:239},{x:31,y:3,c:239},{x:0,y:4,c:177},{x:1,y:4,c:192},{x:2,y:4,c:207},{x:3,y:4,c:222},{x:4,y:4,c:239},{x:5,y:4,c:239},{x:6,y:4,c:239},{x:7,y:4,c:239},{x:8,y:4,c:239},{x:9,y:4,c:239},{x:10,y:4,c:239},{x:11,y:4,c:239},{x:12,y:4,c:239},{x:13,y:4,c:239},{x:14,y:4,c:239},{x:15,y:4,c:239},{x:16,y:4,c:239},{x:17,y:4,c:239},{x:18,y:4,c:239},{x:19,y:4,c:239},{x:20,y:4,c:239},{x:21,y:4,c:239},{x:22,y:4,c:239},{x:23,y:4,c:239},{x:24,y:4,c:239},{x:25,y:4,c:239},{x:26,y:4,c:239},{x:27,y:4,c:239},{x:28,y:4,c:239},{x:29,y:4,c:239},{x:30,y:4,c:239},{x:31,y:4,c:239},{x:0,y:5,c:163},{x:1,y:5,c:177},{x:2,y:5,c:192},{x:3,y:5,c:207},{x:4,y:5,c:222},{x:5,y:5,c:239},{x:6,y:5,c:239},{x:7,y:5,c:239},{x:8,y:5,c:239},{x:9,y:5,c:239},{x:10,y:5,c:239},{x:11,y:5,c:239},{x:12,y:5,c:239},{x:13,y:5,c:239},{x:14,y:5,c:239},{x:15,y:5,c:239},{x:16,y:5,c:239},{x:17,y:5,c:239},{x:18,y:5,c:239},{x:19,y:5,c:239},{x:20,y:5,c:239},{x:21,y:5,c:239},{x:22,y:5,c:239},{x:23,y:5,c:239},{x:24,y:5,c:239},{x:25,y:5,c:239},{x:26,y:5,c:239},{x:27,y:5,c:239},{x:28,y:5,c:239},{x:29,y:5,c:239},{x:30,y:5,c:239},{x:31,y:5,c:239},{x:0,y:6,c:149},{x:1,y:6,c:163},{x:2,y:6,c:177},{x:3,y:6,c:192},{x:4,y:6,c:207},{x:5,y:6,c:222},{x:6,y:6,c:239},{x:7,y:6,c:239},{x:8,y:6,c:239},{x:9,y:6,c:239},{x:10,y:6,c:239},{x:11,y:6,c:239},{x:12,y:6,c:239},{x:13,y:6,c:239},{x:14,y:6,c:239},{x:15,y:6,c:239},{x:16,y:6,c:239},{x:17,y:6,c:239},{x:18,y:6,c:239},{x:19,y:6,c:239},{x:20,y:6,c:239},{x:21,y:6,c:239},{x:22,y:6,c:239},{x:23,y:6,c:239},{x:24,y:6,c:239},{x:25,y:6,c:239},{x:26,y:6,c:239},{x:27,y:6,c:239},{x:28,y:6,c:239},{x:29,y:6,c:239},{x:30,y:6,c:239},{x:31,y:6,c:239},{x:0,y:7,c:136},{x:1,y:7,c:149},{x:2,y:7,c:163},{x:3,y:7,c:177},{x:4,y:7,c:192},{x:5,y:7,c:207},{x:6,y:7,c:222},{x:7,y:7,c:239},{x:8,y:7,c:239},{x:9,y:7,c:239},{x:10,y:7,c:239},{x:11,y:7,c:239},{x:12,y:7,c:239},{x:13,y:7,c:239},{x:14,y:7,c:239},{x:15,y:7,c:239},{x:16,y:7,c:239},{x:17,y:7,c:239},{x:18,y:7,c:239},{x:19,y:7,c:239},{x:20,y:7,c:239},{x:21,y:7,c:239},{x:22,y:7,c:239},{x:23,y:7,c:239},{x:24,y:7,c:239},{x:25,y:7,c:239},{x:26,y:7,c:239},{x:27,y:7,c:239},{x:28,y:7,c:239},{x:29,y:7,c:239},{x:30,y:7,c:239},{x:31,y:7,c:239},{x:0,y:8,c:124},{x:1,y:8,c:136},{x:2,y:8,c:149},{x:3,y:8,c:163},{x:4,y:8,c:177},{x:5,y:8,c:192},{x:6,y:8,c:207},{x:7,y:8,c:222},{x:8,y:8,c:239},{x:9,y:8,c:239},{x:10,y:8,c:239},{x:11,y:8,c:239},{x:12,y:8,c:239},{x:13,y:8,c:240},{x:14,y:8,c:240},{x:15,y:8,c:240},{x:16,y:8,c:240},{x:17,y:8,c:240},{x:18,y:8,c:240},{x:19,y:8,c:239},{x:20,y:8,c:239},{x:21,y:8,c:239},{x:22,y:8,c:239},{x:23,y:8,c:239},{x:24,y:8,c:239},{x:25,y:8,c:239},{x:26,y:8,c:239},{x:27,y:8,c:239},{x:28,y:8,c:239},{x:29,y:8,c:239},{x:30,y:8,c:239},{x:31,y:8,c:239},{x:0,y:9,c:96},{x:1,y:9,c:107},{x:2,y:9,c:118},{x:3,y:9,c:129},{x:4,y:9,c:141},{x:5,y:9,c:153},{x:6,y:9,c:166},{x:7,y:9,c:180},{x:8,y:9,c:193},{x:9,y:9,c:208},{x:10,y:9,c:209},{x:11,y:9,c:210},{x:12,y:9,c:240},{x:13,y:9,c:240},{x:14,y:9,c:240},{x:15,y:9,c:240},{x:16,y:9,c:240},{x:17,y:9,c:240},{x:18,y:9,c:240},{x:19,y:9,c:240},{x:20,y:9,c:219},{x:21,y:9,c:220},{x:22,y:9,c:220},{x:23,y:9,c:222},{x:24,y:9,c:223},{x:25,y:9,c:224},{x:26,y:9,c:224},{x:27,y:9,c:226},{x:28,y:9,c:227},{x:29,y:9,c:227},{x:30,y:9,c:228},{x:31,y:9,c:230},{x:0,y:10,c:72},{x:1,y:10,c:80},{x:2,y:10,c:89},{x:3,y:10,c:99},{x:4,y:10,c:108},{x:5,y:10,c:119},{x:6,y:10,c:129},{x:7,y:10,c:140},{x:8,y:10,c:152},{x:9,y:10,c:163},{x:10,y:10,c:176},{x:11,y:10,c:240},{x:12,y:10,c:240},{x:13,y:10,c:240},{x:14,y:10,c:184},{x:15,y:10,c:186},{x:16,y:10,c:188},{x:17,y:10,c:190},{x:18,y:10,c:240},{x:19,y:10,c:240},{x:20,y:10,c:240},{x:21,y:10,c:198},{x:22,y:10,c:200},{x:23,y:10,c:202},{x:24,y:10,c:204},{x:25,y:10,c:206},{x:26,y:10,c:208},{x:27,y:10,c:210},{x:28,y:10,c:212},{x:29,y:10,c:214},{x:30,y:10,c:216},{x:31,y:10,c:218},{x:0,y:11,c:50},{x:1,y:11,c:57},{x:2,y:11,c:64},{x:3,y:11,c:72},{x:4,y:11,c:79},{x:5,y:11,c:88},{x:6,y:11,c:96},{x:7,y:11,c:105},{x:8,y:11,c:114},{x:9,y:11,c:124},{x:10,y:11,c:133},{x:11,y:11,c:240},{x:12,y:11,c:240},{x:13,y:11,c:150},{x:14,y:11,c:153},{x:15,y:11,c:156},{x:16,y:11,c:159},{x:17,y:11,c:162},{x:18,y:11,c:165},{x:19,y:11,c:240},{x:20,y:11,c:240},{x:21,y:11,c:174},{x:22,y:11,c:177},{x:23,y:11,c:180},{x:24,y:11,c:183},{x:25,y:11,c:186},{x:26,y:11,c:189},{x:27,y:11,c:193},{x:28,y:11,c:196},{x:29,y:11,c:199},{x:30,y:11,c:202},{x:31,y:11,c:205},{x:0,y:12,c:32},{x:1,y:12,c:37},{x:2,y:12,c:42},{x:3,y:12,c:48},{x:4,y:12,c:54},{x:5,y:12,c:60},{x:6,y:12,c:67},{x:7,y:12,c:74},{x:8,y:12,c:81},{x:9,y:12,c:88},{x:10,y:12,c:96},{x:11,y:12,c:240},{x:12,y:12,c:240},{x:13,y:12,c:116},{x:14,y:12,c:120},{x:15,y:12,c:124},{x:16,y:12,c:128},{x:17,y:12,c:132},{x:18,y:12,c:136},{x:19,y:12,c:240},{x:20,y:12,c:240},{x:21,y:12,c:148},{x:22,y:12,c:152},{x:23,y:12,c:157},{x:24,y:12,c:161},{x:25,y:12,c:165},{x:26,y:12,c:169},{x:27,y:12,c:173},{x:28,y:12,c:177},{x:29,y:12,c:181},{x:30,y:12,c:185},{x:31,y:12,c:189},{x:0,y:13,c:16},{x:1,y:13,c:20},{x:2,y:13,c:23},{x:3,y:13,c:28},{x:4,y:13,c:32},{x:5,y:13,c:36},{x:6,y:13,c:41},{x:7,y:13,c:46},{x:8,y:13,c:51},{x:9,y:13,c:56},{x:10,y:13,c:62},{x:11,y:13,c:68},{x:12,y:13,c:73},{x:13,y:13,c:80},{x:14,y:13,c:85},{x:15,y:13,c:90},{x:16,y:13,c:95},{x:17,y:13,c:100},{x:18,y:13,c:105},{x:19,y:13,c:240},{x:20,y:13,c:240},{x:21,y:13,c:121},{x:22,y:13,c:126},{x:23,y:13,c:131},{x:24,y:13,c:136},{x:25,y:13,c:141},{x:26,y:13,c:146},{x:27,y:13,c:151},{x:28,y:13,c:156},{x:29,y:13,c:162},{x:30,y:13,c:167},{x:31,y:13,c:172},{x:0,y:14,c:3},{x:1,y:14,c:5},{x:2,y:14,c:8},{x:3,y:14,c:10},{x:4,y:14,c:13},{x:5,y:14,c:16},{x:6,y:14,c:19},{x:7,y:14,c:22},{x:8,y:14,c:25},{x:9,y:14,c:29},{x:10,y:14,c:32},{x:11,y:14,c:36},{x:12,y:14,c:40},{x:13,y:14,c:43},{x:14,y:14,c:48},{x:15,y:14,c:54},{x:16,y:14,c:60},{x:17,y:14,c:66},{x:18,y:14,c:72},{x:19,y:14,c:240},{x:20,y:14,c:240},{x:21,y:14,c:91},{x:22,y:14,c:97},{x:23,y:14,c:103},{x:24,y:14,c:109},{x:25,y:14,c:115},{x:26,y:14,c:121},{x:27,y:14,c:128},{x:28,y:14,c:134},{x:29,y:14,c:140},{x:30,y:14,c:146},{x:31,y:14,c:152},{x:0,y:15,c:248},{x:1,y:15,c:249},{x:2,y:15,c:250},{x:3,y:15,c:252},{x:4,y:15,c:253},{x:5,y:15,c:254},{x:6,y:15,c:0},{x:7,y:15,c:1},{x:8,y:15,c:3},{x:9,y:15,c:4},{x:10,y:15,c:6},{x:11,y:15,c:8},{x:12,y:15,c:10},{x:13,y:15,c:12},{x:14,y:15,c:13},{x:15,y:15,c:16},{x:16,y:15,c:23},{x:17,y:15,c:30},{x:18,y:15,c:240},{x:19,y:15,c:240},{x:20,y:15,c:240},{x:21,y:15,c:59},{x:22,y:15,c:66},{x:23,y:15,c:73},{x:24,y:15,c:80},{x:25,y:15,c:87},{x:26,y:15,c:95},{x:27,y:15,c:102},{x:28,y:15,c:109},{x:29,y:15,c:116},{x:30,y:15,c:123},{x:31,y:15,c:131},{x:0,y:16,c:240},{x:1,y:16,c:241},{x:2,y:16,c:241},{x:3,y:16,c:241},{x:4,y:16,c:241},{x:5,y:16,c:241},{x:6,y:16,c:241},{x:7,y:16,c:242},{x:8,y:16,c:242},{x:9,y:16,c:242},{x:10,y:16,c:242},{x:11,y:16,c:242},{x:12,y:16,c:243},{x:13,y:16,c:243},{x:14,y:16,c:243},{x:15,y:16,c:243},{x:16,y:16,c:244},{x:17,y:16,c:240},{x:18,y:16,c:240},{x:19,y:16,c:240},{x:20,y:16,c:20},{x:21,y:16,c:28},{x:22,y:16,c:36},{x:23,y:16,c:44},{x:24,y:16,c:52},{x:25,y:16,c:60},{x:26,y:16,c:68},{x:27,y:16,c:77},{x:28,y:16,c:85},{x:29,y:16,c:93},{x:30,y:16,c:101},{x:31,y:16,c:109},{x:0,y:17,c:240},{x:1,y:17,c:240},{x:2,y:17,c:241},{x:3,y:17,c:241},{x:4,y:17,c:241},{x:5,y:17,c:241},{x:6,y:17,c:241},{x:7,y:17,c:241},{x:8,y:17,c:242},{x:9,y:17,c:242},{x:10,y:17,c:242},{x:11,y:17,c:242},{x:12,y:17,c:242},{x:13,y:17,c:243},{x:14,y:17,c:243},{x:15,y:17,c:243},{x:16,y:17,c:240},{x:17,y:17,c:240},{x:18,y:17,c:240},{x:19,y:17,c:4},{x:20,y:17,c:12},{x:21,y:17,c:20},{x:22,y:17,c:28},{x:23,y:17,c:36},{x:24,y:17,c:44},{x:25,y:17,c:52},{x:26,y:17,c:60},{x:27,y:17,c:68},{x:28,y:17,c:77},{x:29,y:17,c:85},{x:30,y:17,c:93},{x:31,y:17,c:101},{x:0,y:18,c:240},{x:1,y:18,c:240},{x:2,y:18,c:240},{x:3,y:18,c:240},{x:4,y:18,c:240},{x:5,y:18,c:241},{x:6,y:18,c:241},{x:7,y:18,c:241},{x:8,y:18,c:241},{x:9,y:18,c:241},{x:10,y:18,c:241},{x:11,y:18,c:241},{x:12,y:18,c:241},{x:13,y:18,c:242},{x:14,y:18,c:242},{x:15,y:18,c:240},{x:16,y:18,c:240},{x:17,y:18,c:240},{x:18,y:18,c:243},{x:19,y:18,c:251},{x:20,y:18,c:3},{x:21,y:18,c:11},{x:22,y:18,c:19},{x:23,y:18,c:27},{x:24,y:18,c:35},{x:25,y:18,c:43},{x:26,y:18,c:52},{x:27,y:18,c:60},{x:28,y:18,c:68},{x:29,y:18,c:76},{x:30,y:18,c:84},{x:31,y:18,c:92},{x:0,y:19,c:240},{x:1,y:19,c:240},{x:2,y:19,c:240},{x:3,y:19,c:240},{x:4,y:19,c:240},{x:5,y:19,c:240},{x:6,y:19,c:241},{x:7,y:19,c:241},{x:8,y:19,c:241},{x:9,y:19,c:241},{x:10,y:19,c:241},{x:11,y:19,c:241},{x:12,y:19,c:241},{x:13,y:19,c:241},{x:14,y:19,c:240},{x:15,y:19,c:240},{x:16,y:19,c:240},{x:17,y:19,c:242},{x:18,y:19,c:242},{x:19,y:19,c:243},{x:20,y:19,c:251},{x:21,y:19,c:3},{x:22,y:19,c:11},{x:23,y:19,c:19},{x:24,y:19,c:27},{x:25,y:19,c:35},{x:26,y:19,c:43},{x:27,y:19,c:52},{x:28,y:19,c:60},{x:29,y:19,c:68},{x:30,y:19,c:76},{x:31,y:19,c:84},{x:0,y:20,c:240},{x:1,y:20,c:240},{x:2,y:20,c:240},{x:3,y:20,c:240},{x:4,y:20,c:240},{x:5,y:20,c:240},{x:6,y:20,c:240},{x:7,y:20,c:241},{x:8,y:20,c:241},{x:9,y:20,c:241},{x:10,y:20,c:241},{x:11,y:20,c:241},{x:12,y:20,c:241},{x:13,y:20,c:240},{x:14,y:20,c:240},{x:15,y:20,c:240},{x:16,y:20,c:242},{x:17,y:20,c:242},{x:18,y:20,c:242},{x:19,y:20,c:242},{x:20,y:20,c:243},{x:21,y:20,c:251},{x:22,y:20,c:3},{x:23,y:20,c:11},{x:24,y:20,c:19},{x:25,y:20,c:27},{x:26,y:20,c:35},{x:27,y:20,c:43},{x:28,y:20,c:52},{x:29,y:20,c:60},{x:30,y:20,c:68},{x:31,y:20,c:76},{x:0,y:21,c:240},{x:1,y:21,c:240},{x:2,y:21,c:240},{x:3,y:21,c:240},{x:4,y:21,c:240},{x:5,y:21,c:240},{x:6,y:21,c:240},{x:7,y:21,c:240},{x:8,y:21,c:241},{x:9,y:21,c:241},{x:10,y:21,c:241},{x:11,y:21,c:241},{x:12,y:21,c:240},{x:13,y:21,c:240},{x:14,y:21,c:240},{x:15,y:21,c:241},{x:16,y:21,c:242},{x:17,y:21,c:242},{x:18,y:21,c:242},{x:19,y:21,c:242},{x:20,y:21,c:242},{x:21,y:21,c:243},{x:22,y:21,c:251},{x:23,y:21,c:3},{x:24,y:21,c:11},{x:25,y:21,c:19},{x:26,y:21,c:27},{x:27,y:21,c:35},{x:28,y:21,c:43},{x:29,y:21,c:52},{x:30,y:21,c:60},{x:31,y:21,c:68},{x:0,y:22,c:240},{x:1,y:22,c:240},{x:2,y:22,c:240},{x:3,y:22,c:240},{x:4,y:22,c:240},{x:5,y:22,c:240},{x:6,y:22,c:240},{x:7,y:22,c:240},{x:8,y:22,c:240},{x:9,y:22,c:240},{x:10,y:22,c:240},{x:11,y:22,c:240},{x:12,y:22,c:240},{x:13,y:22,c:240},{x:14,y:22,c:240},{x:15,y:22,c:240},{x:16,y:22,c:240},{x:17,y:22,c:240},{x:18,y:22,c:240},{x:19,y:22,c:240},{x:20,y:22,c:240},{x:21,y:22,c:241},{x:22,y:22,c:242},{x:23,y:22,c:250},{x:24,y:22,c:2},{x:25,y:22,c:10},{x:26,y:22,c:18},{x:27,y:22,c:26},{x:28,y:22,c:34},{x:29,y:22,c:43},{x:30,y:22,c:51},{x:31,y:22,c:59},{x:0,y:23,c:240},{x:1,y:23,c:240},{x:2,y:23,c:240},{x:3,y:23,c:240},{x:4,y:23,c:240},{x:5,y:23,c:240},{x:6,y:23,c:240},{x:7,y:23,c:240},{x:8,y:23,c:240},{x:9,y:23,c:240},{x:10,y:23,c:240},{x:11,y:23,c:240},{x:12,y:23,c:240},{x:13,y:23,c:240},{x:14,y:23,c:240},{x:15,y:23,c:240},{x:16,y:23,c:240},{x:17,y:23,c:240},{x:18,y:23,c:240},{x:19,y:23,c:240},{x:20,y:23,c:240},{x:21,y:23,c:241},{x:22,y:23,c:241},{x:23,y:23,c:242},{x:24,y:23,c:250},{x:25,y:23,c:2},{x:26,y:23,c:10},{x:27,y:23,c:18},{x:28,y:23,c:26},{x:29,y:23,c:34},{x:30,y:23,c:43},{x:31,y:23,c:51},{x:0,y:24,c:240},{x:1,y:24,c:240},{x:2,y:24,c:240},{x:3,y:24,c:240},{x:4,y:24,c:240},{x:5,y:24,c:240},{x:6,y:24,c:240},{x:7,y:24,c:240},{x:8,y:24,c:240},{x:9,y:24,c:240},{x:10,y:24,c:240},{x:11,y:24,c:240},{x:12,y:24,c:240},{x:13,y:24,c:240},{x:14,y:24,c:240},{x:15,y:24,c:241},{x:16,y:24,c:241},{x:17,y:24,c:241},{x:18,y:24,c:241},{x:19,y:24,c:241},{x:20,y:24,c:241},{x:21,y:24,c:241},{x:22,y:24,c:241},{x:23,y:24,c:241},{x:24,y:24,c:242},{x:25,y:24,c:250},{x:26,y:24,c:2},{x:27,y:24,c:10},{x:28,y:24,c:18},{x:29,y:24,c:26},{x:30,y:24,c:34},{x:31,y:24,c:43},{x:0,y:25,c:240},{x:1,y:25,c:240},{x:2,y:25,c:240},{x:3,y:25,c:240},{x:4,y:25,c:240},{x:5,y:25,c:240},{x:6,y:25,c:240},{x:7,y:25,c:240},{x:8,y:25,c:240},{x:9,y:25,c:240},{x:10,y:25,c:240},{x:11,y:25,c:240},{x:12,y:25,c:240},{x:13,y:25,c:240},{x:14,y:25,c:240},{x:15,y:25,c:240},{x:16,y:25,c:240},{x:17,y:25,c:240},{x:18,y:25,c:240},{x:19,y:25,c:240},{x:20,y:25,c:240},{x:21,y:25,c:240},{x:22,y:25,c:240},{x:23,y:25,c:240},{x:24,y:25,c:240},{x:25,y:25,c:241},{x:26,y:25,c:249},{x:27,y:25,c:1},{x:28,y:25,c:9},{x:29,y:25,c:17},{x:30,y:25,c:25},{x:31,y:25,c:34},{x:0,y:26,c:240},{x:1,y:26,c:240},{x:2,y:26,c:240},{x:3,y:26,c:240},{x:4,y:26,c:240},{x:5,y:26,c:240},{x:6,y:26,c:240},{x:7,y:26,c:240},{x:8,y:26,c:240},{x:9,y:26,c:240},{x:10,y:26,c:240},{x:11,y:26,c:240},{x:12,y:26,c:240},{x:13,y:26,c:240},{x:14,y:26,c:240},{x:15,y:26,c:240},{x:16,y:26,c:240},{x:17,y:26,c:240},{x:18,y:26,c:240},{x:19,y:26,c:240},{x:20,y:26,c:240},{x:21,y:26,c:240},{x:22,y:26,c:240},{x:23,y:26,c:240},{x:24,y:26,c:240},{x:25,y:26,c:240},{x:26,y:26,c:241},{x:27,y:26,c:249},{x:28,y:26,c:1},{x:29,y:26,c:9},{x:30,y:26,c:17},{x:31,y:26,c:25},{x:0,y:27,c:240},{x:1,y:27,c:240},{x:2,y:27,c:240},{x:3,y:27,c:240},{x:4,y:27,c:240},{x:5,y:27,c:240},{x:6,y:27,c:240},{x:7,y:27,c:240},{x:8,y:27,c:240},{x:9,y:27,c:240},{x:10,y:27,c:240},{x:11,y:27,c:240},{x:12,y:27,c:240},{x:13,y:27,c:240},{x:14,y:27,c:240},{x:15,y:27,c:240},{x:16,y:27,c:240},{x:17,y:27,c:240},{x:18,y:27,c:240},{x:19,y:27,c:240},{x:20,y:27,c:240},{x:21,y:27,c:240},{x:22,y:27,c:240},{x:23,y:27,c:240},{x:24,y:27,c:240},{x:25,y:27,c:240},{x:26,y:27,c:240},{x:27,y:27,c:241},{x:28,y:27,c:249},{x:29,y:27,c:1},{x:30,y:27,c:9},{x:31,y:27,c:17},{x:0,y:28,c:240},{x:1,y:28,c:240},{x:2,y:28,c:240},{x:3,y:28,c:240},{x:4,y:28,c:240},{x:5,y:28,c:240},{x:6,y:28,c:240},{x:7,y:28,c:240},{x:8,y:28,c:240},{x:9,y:28,c:240},{x:10,y:28,c:240},{x:11,y:28,c:240},{x:12,y:28,c:240},{x:13,y:28,c:240},{x:14,y:28,c:240},{x:15,y:28,c:240},{x:16,y:28,c:240},{x:17,y:28,c:240},{x:18,y:28,c:240},{x:19,y:28,c:240},{x:20,y:28,c:240},{x:21,y:28,c:240},{x:22,y:28,c:240},{x:23,y:28,c:240},{x:24,y:28,c:240},{x:25,y:28,c:240},{x:26,y:28,c:240},{x:27,y:28,c:240},{x:28,y:28,c:241},{x:29,y:28,c:249},{x:30,y:28,c:1},{x:31,y:28,c:9},{x:0,y:29,c:240},{x:1,y:29,c:240},{x:2,y:29,c:240},{x:3,y:29,c:240},{x:4,y:29,c:240},{x:5,y:29,c:240},{x:6,y:29,c:240},{x:7,y:29,c:240},{x:8,y:29,c:240},{x:9,y:29,c:240},{x:10,y:29,c:240},{x:11,y:29,c:240},{x:12,y:29,c:240},{x:13,y:29,c:240},{x:14,y:29,c:240},{x:15,y:29,c:240},{x:16,y:29,c:240},{x:17,y:29,c:240},{x:18,y:29,c:240},{x:19,y:29,c:240},{x:20,y:29,c:240},{x:21,y:29,c:240},{x:22,y:29,c:240},{x:23,y:29,c:240},{x:24,y:29,c:240},{x:25,y:29,c:240},{x:26,y:29,c:240},{x:27,y:29,c:240},{x:28,y:29,c:240},{x:29,y:29,c:240},{x:30,y:29,c:248},{x:31,y:29,c:0},{x:0,y:30,c:240},{x:1,y:30,c:240},{x:2,y:30,c:240},{x:3,y:30,c:240},{x:4,y:30,c:240},{x:5,y:30,c:240},{x:6,y:30,c:240},{x:7,y:30,c:240},{x:8,y:30,c:240},{x:9,y:30,c:240},{x:10,y:30,c:240},{x:11,y:30,c:240},{x:12,y:30,c:240},{x:13,y:30,c:240},{x:14,y:30,c:240},{x:15,y:30,c:240},{x:16,y:30,c:240},{x:17,y:30,c:240},{x:18,y:30,c:240},{x:19,y:30,c:240},{x:20,y:30,c:240},{x:21,y:30,c:240},{x:22,y:30,c:240},{x:23,y:30,c:240},{x:24,y:30,c:240},{x:25,y:30,c:240},{x:26,y:30,c:240},{x:27,y:30,c:240},{x:28,y:30,c:240},{x:29,y:30,c:240},{x:30,y:30,c:240},{x:31,y:30,c:248},{x:0,y:31,c:240},{x:1,y:31,c:240},{x:2,y:31,c:240},{x:3,y:31,c:240},{x:4,y:31,c:240},{x:5,y:31,c:240},{x:6,y:31,c:240},{x:7,y:31,c:240},{x:8,y:31,c:240},{x:9,y:31,c:240},{x:10,y:31,c:240},{x:11,y:31,c:240},{x:12,y:31,c:240},{x:13,y:31,c:240},{x:14,y:31,c:240},{x:15,y:31,c:240},{x:16,y:31,c:240},{x:17,y:31,c:240},{x:18,y:31,c:240},{x:19,y:31,c:240},{x:20,y:31,c:240},{x:21,y:31,c:240},{x:22,y:31,c:240},{x:23,y:31,c:240},{x:24,y:31,c:240},{x:25,y:31,c:240},{x:26,y:31,c:240},{x:27,y:31,c:240},{x:28,y:31,c:240},{x:29,y:31,c:240},{x:30,y:31,c:240},{x:31,y:31,c:240},]";
							var pixels = "[";
							var do_iterate = function() {
								png.iterate_pixels(function(x, y, color) {
									// happens very quickly I think... not sure it will be the fastest way, however.
									//console.log('iterated pixel');
									//console.log('x, y, color ' + x + ', ' + y + ', ' + color);
									pixels += "{x:" + x + ",y:" + y + ",c:" + color + "},";
									// then save the PNG
									//png.save_to_disk(
								});
							}
							do_iterate();
							pixels += "]";
							//console.log("\r\n" + pixels);
							assert.equal(pixels, estimated_pixels); // failed!!!!!!!
							
							//var map_sf = png.get_map_scanline_filters();
							//console.log('map_sf ' + stringify(map_sf));
							
							//var unfiltered_scanline_0 = png.get_unfiltered_scanline_buffer(0);
							//console.log('unfiltered_scanline_0 ' + unfiltered_scanline_0);
							//console.log('unfiltered_scanline_0 ' + stringify(unfiltered_scanline_0));
							//console.log('unfiltered_scanline_0.length ' + stringify(unfiltered_scanline_0.length));
							
							png.iterate_row(0, function(x, y, color) {
								console.log('x, y, color ' + x + ', ' + y + ', ' + color);
							})
							
							assert.equal(11111, 11111);
							done();
						}
					});
				}				
				test_load_png_with_scanline_filter_2();
			});
						
			// -----------------------------------------------------
			//	test_load_pngsuite_save_different_scanline_filters
			// -----------------------------------------------------
				
			xit("test_load_pngsuite_save_different_scanline_filters", function(done) {
			
				// want to try testing smaller images....
				
				var load_png_set_scanline_filters_save = function(source_path, dest_path, scanline_filter, callback) {
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
						
							console.log('size ' + stringify(size));
							console.log('scanline_length ' + stringify(png.scanline_length));
							console.log('color_type ' + stringify(color_type));
							console.log('bit_depth ' + stringify(bit_depth));
							
							// This should work!!!
							png.set_scanline_filter_all_rows(scanline_filter);
							
							png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(dest_path, function() {
								//console.log('png saved');
								callback(null, true);
							});
						}
					});
				}

				// Scanline filtering not working right... need to go back to some more basic tests.



				// OK, this is going wrong at the moment!
				
				var test_load_pngsuite_save_different_scanline_filters = function() {
					var fns = [];
					
					fns.push([load_png_set_scanline_filters_save, ['./source/pngsuite/f00n2c08.png', './res/f001_f00n2c08.png', 1]]);
					fns.push([load_png_set_scanline_filters_save, ['./source/pngsuite/f00n2c08.png', './res/f002_f00n2c08.png', 2]]);
					fns.push([load_png_set_scanline_filters_save, ['./source/pngsuite/f00n2c08.png', './res/f003_f00n2c08.png', 3]]);
					fns.push([load_png_set_scanline_filters_save, ['./source/pngsuite/f00n2c08.png', './res/f004_f00n2c08.png', 4]]);
					
					call_multi(fns, function(err, res_multi) {
						console.log('multi callback');
					})
					
				}
				test_load_pngsuite_save_different_scanline_filters();
			
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_scanline_filter_0_sprite_save_scanline_filter_1
			// -----------------------------------------------------
				
			xit("test_load_scanline_filter_0_sprite_save_scanline_filter_1", function(done) {
			
				var test_load_scanline_filter_0_sprite_save_scanline_filter_1 = function() {
					
					//var source_path = __dirpath + '/source/gradient24.png';
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slf1.png';
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
						
							// This should work!!!
							png.set_scanline_filter_all_rows(1);
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
						
						
					});
				}
				test_load_scanline_filter_0_sprite_save_scanline_filter_1();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_scanline_filter_0_sprite_save_scanline_filter_2
			// -----------------------------------------------------
				
			xit("test_load_scanline_filter_0_sprite_save_scanline_filter_2", function(done) {
			
				var test_load_scanline_filter_0_sprite_save_scanline_filter_2 = function() {
					
					//var source_path = __dirpath + '/source/gradient24.png';
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slf2.png';
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
						
							console.log('size ' + stringify(size));
							console.log('scanline_length ' + stringify(png.scanline_length));
							console.log('color_type ' + stringify(color_type));
							console.log('bit_depth ' + stringify(bit_depth));
							
							// This should work!!!
							png.set_scanline_filter_all_rows(2);
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
						
						
					});
				}				
				test_load_scanline_filter_0_sprite_save_scanline_filter_2();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_scanline_filter_0_sprite_save_scanline_filter_3
			// -----------------------------------------------------
				
			xit("test_load_scanline_filter_0_sprite_save_scanline_filter_3", function(done) {
			
				var test_load_scanline_filter_0_sprite_save_scanline_filter_3 = function() {
					
					//var source_path = __dirpath + '/source/gradient24.png';
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slf3.png';
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
						
							// This should work!!!
							png.set_scanline_filter_all_rows(3);
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
						
						
					});
				}
				test_load_scanline_filter_0_sprite_save_scanline_filter_3();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_scanline_filter_0_sprite_save_scanline_filter_4
			// -----------------------------------------------------
				
			xit("test_load_scanline_filter_0_sprite_save_scanline_filter_4", function(done) {
			
				var test_load_scanline_filter_0_sprite_save_scanline_filter_4 = function() {
					
					//var source_path = __dirpath + '/source/gradient24.png';
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slf4.png';
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
						
							console.log('size ' + stringify(size));
							console.log('scanline_length ' + stringify(png.scanline_length));
							console.log('color_type ' + stringify(color_type));
							console.log('bit_depth ' + stringify(bit_depth));
							
							// This should work!!!
							png.set_scanline_filter_all_rows(4);
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
						
						
					});
				}        
				test_load_scanline_filter_0_sprite_save_scanline_filter_4();
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf1_to_rgba_buffer_save_as_png
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf1_to_rgba_buffer_save_as_png", function(done) {
			
				var test_load_sprite_slf1_to_rgba_buffer_save_as_png = function() {
					// sprite_slf2
					var source_path = './source/sprite_slf1.png';
					var res_path = './res/sprite_from_rgba_from_slf1.png';
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							console.log('loaded');
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_sprite_slf1_to_rgba_buffer_save_as_png();
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf2_to_rgba_buffer_save_as_png
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf2_to_rgba_buffer_save_as_png", function(done) {
			
				var test_load_sprite_slf2_to_rgba_buffer_save_as_png = function() {
					// sprite_slf2
					var source_path = './source/sprite_slf2.png';
					var res_path = './res/sprite_from_rgba_from_slf2.png';
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							console.log('loaded');
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_sprite_slf2_to_rgba_buffer_save_as_png();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf3_to_rgba_buffer_save_as_png
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf3_to_rgba_buffer_save_as_png", function(done) {
			
				var test_load_sprite_slf3_to_rgba_buffer_save_as_png = function() {
					// sprite_slf2
					var source_path = './source/sprite_slf3.png';
					var res_path = './res/sprite_from_rgba_from_slf3.png';
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							console.log('loaded');
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_sprite_slf3_to_rgba_buffer_save_as_png();
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf4_to_rgba_buffer_save_as_png
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf4_to_rgba_buffer_save_as_png", function(done) {
			
				var test_load_sprite_slf4_to_rgba_buffer_save_as_png = function() {
					// sprite_slf2
					var source_path = './source/sprite_slf4.png';
					var res_path = './res/sprite_from_rgba_from_slf4.png';
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							console.log('loaded');
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_sprite_slf4_to_rgba_buffer_save_as_png();
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_dice_to_rgba_buffer_save_as_png
			// -----------------------------------------------------
				
			xit("test_load_dice_to_rgba_buffer_save_as_png", function(done) {
			
				var test_load_dice_to_rgba_buffer_save_as_png = function() {
					// sprite_slf2
					var source_path = './source/dice.png';
					var res_path = './res/dice_from_rgba.png';
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							console.log('loaded');
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_dice_to_rgba_buffer_save_as_png();
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_dice_to_rgba_buffer_save_as_png_slf1
			// -----------------------------------------------------
				
			xit("test_load_dice_to_rgba_buffer_save_as_png_slf1", function(done) {
			
				var test_load_dice_to_rgba_buffer_save_as_png_slf1 = function() {
					// sprite_slf2
					var source_path = './source/dice.png';
					var res_path = './res/dice_slf1_from_rgba.png';
					console.log('pre load_pixel_buffer_from_disk');
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							//console.log('loaded');
							//throw '!stop!';
							// in the save options we want to be able to set the scanline filter.
							//  Also, having it automatically optimizing that when saving would help.
							//  But can set it for the whole image.
							
							// png.set_scanline_filter_all_rows(4);
							
							//jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 2}, function(err, res_save) {
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 1}, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_dice_to_rgba_buffer_save_as_png_slf1();
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_dice_to_rgba_buffer_save_as_png_slf2
			// -----------------------------------------------------
				
			xit("test_load_dice_to_rgba_buffer_save_as_png_slf2", function(done) {
			
				var test_load_dice_to_rgba_buffer_save_as_png_slf2 = function() {
					// sprite_slf2
					var source_path = './source/dice.png';
					var res_path = './res/dice_slf2_from_rgba.png';
					console.log('pre load_pixel_buffer_from_disk');
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							//console.log('loaded');
							//throw '!stop!';
							// in the save options we want to be able to set the scanline filter.
							//  Also, having it automatically optimizing that when saving would help.
							//  But can set it for the whole image.
							
							// png.set_scanline_filter_all_rows(4);
							
							//jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 2}, function(err, res_save) {
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 2}, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_dice_to_rgba_buffer_save_as_png_slf2();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_dice_to_rgba_buffer_save_as_png_slf3
			// -----------------------------------------------------
				
			xit("test_load_dice_to_rgba_buffer_save_as_png_slf3", function(done) {
			
				var test_load_dice_to_rgba_buffer_save_as_png_slf3 = function() {
					// sprite_slf2
					var source_path = './source/dice.png';
					var res_path = './res/dice_slf3_from_rgba.png';
					console.log('pre load_pixel_buffer_from_disk');
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							//console.log('loaded');
							//throw '!stop!';
							// in the save options we want to be able to set the scanline filter.
							//  Also, having it automatically optimizing that when saving would help.
							//  But can set it for the whole image.
							
							// png.set_scanline_filter_all_rows(4);
							
							//jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 2}, function(err, res_save) {
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 3}, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
				}
				test_load_dice_to_rgba_buffer_save_as_png_slf3();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_dice_to_rgba_buffer_save_as_png_slf4
			// -----------------------------------------------------
				
			xit("test_load_dice_to_rgba_buffer_save_as_png_slf4", function(done) {
			
				var test_load_dice_to_rgba_buffer_save_as_png_slf4 = function() {
					// sprite_slf2
					var source_path = './source/dice.png';
					var res_path = './res/dice_slf4_from_rgba.png';
					console.log('pre load_pixel_buffer_from_disk');
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							//console.log('loaded');
							//throw '!stop!';
							// in the save options we want to be able to set the scanline filter.
							//  Also, having it automatically optimizing that when saving would help.
							//  But can set it for the whole image.
							
							// png.set_scanline_filter_all_rows(4);
							
							//jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 2}, function(err, res_save) {
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, {'scanline_encoding': 4}, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_dice_to_rgba_buffer_save_as_png_slf4();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_f01n2c08_to_rgba_buffer_save_as_png
			// -----------------------------------------------------
				
			xit("test_load_f01n2c08_to_rgba_buffer_save_as_png", function(done) {
			
				var test_load_f01n2c08_to_rgba_buffer_save_as_png = function() {
					// sprite_slf2
					var source_path = './source/pngsuite/f01n2c08.png';
					var res_path = './res/f01n2c08_from_rgba.png';
					
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							console.log('loaded');
							jsgui_png.save_pixel_buffer_to_disk(rgba_buffer, res_path, function(err, res_save) {
								if (err) {
									throw err;
								} else {
									console.log('saved');
								}
							})
						}
					})
					
				}
				test_load_f01n2c08_to_rgba_buffer_save_as_png();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf0_predict_best_slfs
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf0_predict_best_slfs", function(done) {
			
				var test_load_sprite_slf0_predict_best_slfs = function() {
					var source_path = './source/sprite_slf0.png';
					//var res_path = './res/f01n2c08_from_rgba.png';
					
					// load a png.
					
					// want to analyse all scanlines to find the best filters.
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							
							
							console.log('loaded');
							
							png.ensure_unfiltered_scanlines_buffer();
							console.log('pre analysis');
							
							/*
							png.analyse_scanline_predict_best_filter(572, function(err, res_best_filter) {
								console.log('res_best_filter ' + res_best_filter);
							})
							*/
							
							// analyse_scanlines_predict_best_filters
							png.analyse_scanlines_predict_best_filters(function(err, res_best_filters) {
								console.log('res_best_filters ' + res_best_filters);
							})
						}
					})
				}
				test_load_sprite_slf0_predict_best_slfs();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf0_save_opti_predict_best_slfs
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf0_save_opti_predict_best_slfs", function(done) {
			
				var test_load_sprite_slf0_save_opti_predict_best_slfs = function() {
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slfOpti.png';
					
					// load a png.
					// want to analyse all scanlines to find the best filters.
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							
							
							console.log('loaded');
							
							png.ensure_unfiltered_scanlines_buffer();
							console.log('pre analysis');
							
							/*
							png.analyse_scanline_predict_best_filter(572, function(err, res_best_filter) {
								console.log('res_best_filter ' + res_best_filter);
							})
							*/
							
							// analyse_scanlines_predict_best_filters
							png.optimize_scanline_filters(function(err, res_best_filters) {
								//console.log('res_best_filters ' + res_best_filters);
								console.log('scanline filters have been optimized');
								
								png.filter_all_scanlines();
								
								png.save_to_disk(res_path, function(err, res_saved) {
									console.log('saved png to ' + res_path);
								})
								
							})
						}
					})
				}
				test_load_sprite_slf0_save_opti_predict_best_slfs();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf0_save_opti_predict_best_slfs
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf0_save_opti_predict_best_slfs", function(done) {
			
				var test_load_sprite_slf0_save_opti_predict_best_slfs = function() {
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slfOptiBest.png';
					
					// load a png.
					// want to analyse all scanlines to find the best filters.
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							
							
							console.log('loaded');
							
							png.ensure_unfiltered_scanlines_buffer();
							console.log('pre analysis');
							
							/*
							png.analyse_scanline_predict_best_filter(572, function(err, res_best_filter) {
								console.log('res_best_filter ' + res_best_filter);
							})
							*/
							
							// analyse_scanlines_predict_best_filters
							
							// and choose the save optimizations here.
							
							// lossy_best?
							//  different optimization options.
							
							// will use optimize_filter_all_scanlines now that that function has been written.
							
							png.save_to_disk(res_path, {'optimize': 'best'}, function(err, res_saved) {
								if (err) {
									throw err
								} else {
									console.log('saved png to ' + res_path);
								}
								
							})
							
						}
					})
				}
				test_load_sprite_slf0_save_opti_predict_best_slfs();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_sprite_slf0_save_opti_predict_fast_slfs
			// -----------------------------------------------------
				
			xit("test_load_sprite_slf0_save_opti_predict_fast_slfs", function(done) {
			
				var test_load_sprite_slf0_save_opti_predict_fast_slfs = function() {
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slfOptiFast.png';
					
					// load a png.
					// want to analyse all scanlines to find the best filters.
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							
							
							console.log('loaded');
							
							png.ensure_unfiltered_scanlines_buffer();
							console.log('pre analysis');
							
							/*
							png.analyse_scanline_predict_best_filter(572, function(err, res_best_filter) {
								console.log('res_best_filter ' + res_best_filter);
							})
							*/
							
							// analyse_scanlines_predict_best_filters
							
							// and choose the save optimizations here.
							
							// lossy_best?
							//  different optimization options.
							
							// will use optimize_filter_all_scanlines now that that function has been written.
							
							png.save_to_disk(res_path, {'optimize': 'fast'}, function(err, res_saved) {
								if (err) {
									throw err
								} else {
									console.log('saved png to ' + res_path);
								}
								
							})
							
						}
					})
				}
				test_load_sprite_slf0_save_opti_predict_fast_slfs();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_sprite_optimize_filter_all_scanlines
			// -----------------------------------------------------
				
			xit("test_sprite_optimize_filter_all_scanlines", function(done) {
			
				//  optimize_filter_all_scanlines is a new function that should be faster, and should be able to set all scanline filters to optimal ones,
				//  while creating the filtered scanline buffer in its entirity.
				// optimize_filter_all_scanlines
				
				var test_sprite_optimize_filter_all_scanlines = function() {
					var source_path = './source/sprite_slf0.png';
					var res_path = './res/sprite_slfOpti_filter_all_scanlines.png';
					
					// load a png.
					// want to analyse all scanlines to find the best filters.
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							
							
							//console.log('loaded');
							
							png.ensure_unfiltered_scanlines_buffer();
							//console.log('pre analysis');
							
							/*
							png.analyse_scanline_predict_best_filter(572, function(err, res_best_filter) {
								console.log('res_best_filter ' + res_best_filter);
							})
							*/
							
							// analyse_scanlines_predict_best_filters
							png.optimize_filter_all_scanlines(function(err, res_best_filters) {
								//console.log('res_best_filters ' + res_best_filters);
								console.log('scanline filters have been optimized and filtered');
								
								//png.filter_all_scanlines();
								
								png.save_to_disk(res_path, function(err, res_saved) {
									console.log('saved png to ' + res_path);
								})
								
							})
						}
					})
				}
				test_sprite_optimize_filter_all_scanlines();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_basic_greyscale_1_bit
			// -----------------------------------------------------
				
			xit("test_basic_greyscale_1_bit", function(done) {
			
				// Some more basic tests...
				//  Load some of the basic PNGs from pngsuite.

				// See what colors are in their palettes, get their palettes from them.
				//  Convery them to RGBA24 or 32
				//  Save them - use these as new source images
				// Then palettize them... will 


				var test_basic_greyscale_1_bit = function() {
					var source_path = './source/pngsuite/basic/basn0g01.png';
					//var res_path = './res/sprite_slfOpti_filter_all_scanlines.png';
					
					// just load it, and count the colors used.

					// load a png.
					// want to analyse all scanlines to find the best filters.
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
							throw err;
						} else {
							// loading could be sped up a lot.
							//  I think not having to create all those separate buffers would help a lot.
							console.log('image has been loaded');
							
							//console.log('loaded');

							// Count the number of colors?

							// get the metadata?

							// get the palette?

							// It does not have a palette (buffer)

							//console.log('png.palette_buffer.length ' + png.palette_buffer.length);

							//that.bit_depth = bit_depth;
							//that.color_type = color_type;
							console.log('png.bit_depth ' + png.bit_depth);
							console.log('png.color_type ' + png.color_type);
							// 0       1,2,4,8,16  Each pixel is a grayscale sample.

							// The palette is not specifically given...
							//  But we calculate it from the pixel value.

							// May need to translate this to rgba or rgb values yo display them.
							//  1bpp could effectively be a bit mask.

							// should be able to iterate through the pixels fairly easily...
							//  or get or set pixels with coordinates and a bit value.

							// Converting the image to a different format...
							//  but also getting and setting pixels within the image.

							// Need to extract a particular bit from a pixel...
							//  is a bit harder to do with 1, 2, 4 bpp images.

							// uses bit shifting, the >> operator.

							// find out which pixel it is in, then which bit offset.


							png.iterate_pixels(function(x, y, pixel_value) {
								console.log('(' + x + ', ' + y + ') ' + pixel_value);
							});


						}
					})
				}
				test_basic_greyscale_1_bit();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_convert_dice_to_greyscale_mode_0
			// -----------------------------------------------------
				
			xit("test_convert_dice_to_greyscale_mode_0", function(done) {
			
				var test_convert_dice_to_greyscale_mode_0 = function() {
					console.log('test_convert_dice_to_greyscale_mode_0 (no alpha)');

					var source_path = './source/dice.png';
					var res_path = './res/greyscale-0-dice.png';

					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							//console.log('image loaded');
							var size = png.size;
							//var color_type = png.color_type;
							//var bit_depth = png.bit_depth;
						
							// This should work!!!
							//png.set_scanline_filter_all_rows(3);

							// and possibly set a background color as well...

							png.set_color_parameters(0, 8);

							// with a black bg: png.set_color_parameters(0, 8);
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
					});

				}
				test_convert_dice_to_greyscale_mode_0();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_convert_dice_to_greyscale_mode_4
			// -----------------------------------------------------
				
			xit("test_convert_dice_to_greyscale_mode_4", function(done) {
			
				var test_convert_dice_to_greyscale_mode_4 = function() {
					console.log('test_convert_dice_to_greyscale_mode_4 (with alpha)');

					var source_path = './source/dice.png';
					var res_path = './res/greyscale-4-dice.png';

					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							//var color_type = png.color_type;
							//var bit_depth = png.bit_depth;
						
							// This should work!!!
							//png.set_scanline_filter_all_rows(3);

							png.set_color_parameters(4, 8);
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
					});
				}
				test_convert_dice_to_greyscale_mode_4();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_convert_dice_to_rgb_mode_2
			// -----------------------------------------------------
				
			xit("test_convert_dice_to_rgb_mode_2", function(done) {
						
				var test_convert_dice_to_rgb_mode_2 = function() {
					console.log('test_convert_dice_to_rgb_mode_2');

					var source_path = './source/dice.png';
					var res_path = './res/rgb-2-dice.png';

					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							//var color_type = png.color_type;
							//var bit_depth = png.bit_depth;
						
							// This should work!!!
							//png.set_scanline_filter_all_rows(3);

							// we lose the alpha channel again.

							png.set_color_parameters(2, 8);
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
					});
				}
				test_convert_dice_to_rgb_mode_2();
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_convert_dice_to_rgb_mode_2_black_bg
			// -----------------------------------------------------
				
			xit("test_convert_dice_to_rgb_mode_2_black_bg", function(done) {
			
				var test_convert_dice_to_rgb_mode_2_black_bg = function() {
					console.log('test_convert_dice_to_rgb_mode_2');

					var source_path = './source/dice.png';
					var res_path = './res/rgb-2-black-bg-dice.png';

					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							var size = png.size;
							png.set_color_parameters(2, 8, 0, 0, 0);

							// need to work on the optimization for RGB images.



							//png.save_to_disk(res_path, {'optimize': 'best'}, function() {
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
					});
				}
				test_convert_dice_to_rgb_mode_2_black_bg();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_rgb_set_scanline_filter_4
			// -----------------------------------------------------
				
			xit("test_rgb_set_scanline_filter_4", function(done) {
			
				// Needs some more testing and fixing for rgb images.
				//  Can we load an rgb image, then set its scanline filters?

				// Going pretty quick in node.js.

				var test_rgb_set_scanline_filter_4 = function() {
					var source_path = './source/rgb-2-black-bg-dice.png';
					var res_path = './res/slf-4-rgb-2-black-bg-dice.png';
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
						
							// This should work!!!
							png.ensure_unfiltered_scanlines_buffer();
							png.set_scanline_filter_all_rows(1);
							png.filter_all_scanlines();
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
						}
						
						
					});
				}
				test_rgb_set_scanline_filter_4();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_rgb_set_scanline_filter_4
			// -----------------------------------------------------
				
			xit("test_rgb_set_scanline_filter_4", function(done) {
			
				var test_rgb_set_scanline_filter_4 = function() {
					console.log('test_rgb_set_scanline_filter_4');
					var source_path = './source/pngsuite/f00n2c08.png';
					var res_path = './res/slf-1-f01n2c08.png';
					
					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
							
							console.log('color_type ' + color_type);
							console.log('bit_depth ' + bit_depth);

							// and we want to get the scanline filters to work properly.
							//  they were before.



							// This should work!!!

							// we can set the scanline bytes easily enough on the rows.
							//  but when saving the image, we need to have it filtered.

							// need to be able to get the unfiltered scanlines buffer
							//  maybe ensure it more easily.

							png.ensure_unfiltered_scanlines_buffer();

							png.set_scanline_filter_all_rows(2);
							png.filter_all_scanlines();

							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
							
							//png.filter_all_scanlines();
							//do_iterate();
						
							//var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
							//console.log('new_png_path ' + new_png_path);
						
							//png.save_to_disk(res_path, function() {
							//    console.log('png saved');
							//});
						}
					});
				};
				test_rgb_set_scanline_filter_4();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	create_2x2_red
			// -----------------------------------------------------
				
			xit("create_2x2_red", function(done) {
			
				var create_2x2_red = function() {
					var res_path = './res/2x2_red.png';
					var pb = new Pixel_Buffer({
						'size': [2,2],
						'bits_per_pixel': 24
					});
					pb.set_pixel(0, 0, 255, 0, 0);
					pb.set_pixel(0, 1, 255, 0, 0);
					pb.set_pixel(1, 0, 255, 0, 0);
					pb.set_pixel(1, 1, 255, 0, 0);

					jsgui_png.save_pixel_buffer_to_disk(pb, res_path, function() {});

				}
				create_2x2_red();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_2x2_red_save_slf_1
			// -----------------------------------------------------
				
			xit("test_2x2_red_save_slf_1", function(done) {
			
				var test_2x2_red_save_slf_1 = function() {
					console.log('test_2x2_red_save_slf_1');
					var source_path = './source/2x2_red.png';
					var res_path = './res/slf-1-2x2_red.png';

					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
							
							console.log('color_type ' + color_type);
							console.log('bit_depth ' + bit_depth);

							png.ensure_unfiltered_scanlines_buffer();

							png.set_scanline_filter_all_rows(1);
							png.filter_all_scanlines();

							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
							
						}
						
						
					});
				}
				test_2x2_red_save_slf_1();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_2x2_red_save_slf_2
			// -----------------------------------------------------
				
			xit("test_2x2_red_save_slf_2", function(done) {
			
				var test_2x2_red_save_slf_2 = function() {
					console.log('test_2x2_red_save_slf_2');
					var source_path = './source/2x2_red.png';
					var res_path = './res/slf-2-2x2_red.png';

					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
							
							console.log('color_type ' + color_type);
							console.log('bit_depth ' + bit_depth);

							png.ensure_unfiltered_scanlines_buffer();

							png.set_scanline_filter_all_rows(2);
							png.filter_all_scanlines();

							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
							
						}
						
						
					});
				}
				test_2x2_red_save_slf_2();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	create_4x4_stripe
			// -----------------------------------------------------
				
			xit("create_4x4_stripe", function(done) {
			
				// load the 2x2 image, then get it to use the paeth filter,
				//  save it

				var create_4x4_stripe = function() {
					var res_path = './res/4x4_stripe.png';
					var pb = new Pixel_Buffer({
						'size': [4,4],
						'bits_per_pixel': 24
					});
					pb.set_pixel(0, 0, 255, 0, 0);
					pb.set_pixel(0, 1, 255, 0, 0);
					pb.set_pixel(0, 2, 255, 0, 0);
					pb.set_pixel(0, 3, 255, 0, 0);
					pb.set_pixel(1, 0, 255, 0, 0);
					pb.set_pixel(1, 1, 255, 0, 0);
					pb.set_pixel(1, 2, 255, 0, 0);
					pb.set_pixel(1, 3, 255, 0, 0);
					pb.set_pixel(2, 0, 0, 0, 255);
					pb.set_pixel(2, 1, 0, 0, 255);
					pb.set_pixel(2, 2, 0, 0, 255);
					pb.set_pixel(2, 3, 0, 0, 255);
					pb.set_pixel(3, 0, 0, 0, 255);
					pb.set_pixel(3, 1, 0, 0, 255);
					pb.set_pixel(3, 2, 0, 0, 255);
					pb.set_pixel(3, 3, 0, 0, 255);

					jsgui_png.save_pixel_buffer_to_disk(pb, res_path, function() {});

				}
				create_4x4_stripe();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_4x4_stripe_save_slf_4
			// -----------------------------------------------------
				
			xit("test_4x4_stripe_save_slf_4", function(done) {
			
				var test_4x4_stripe_save_slf_4 = function() {
					console.log('test_4x4_stripe_save_slf_4');
					var source_path = './source/4x4_stripe.png';
					var res_path = './res/slf-4x4_stripe.png';

					jsgui_png.load_from_disk(source_path, function(err, png) {
						if (err) {
						
						} else {
							//console.log('image loaded');
							var size = png.size;
							var color_type = png.color_type;
							var bit_depth = png.bit_depth;
							
							console.log('color_type ' + color_type);
							console.log('bit_depth ' + bit_depth);

							png.ensure_unfiltered_scanlines_buffer_cpp();

							png.set_scanline_filter_all_rows(2);

							//png.filter_all_scanlines();
							png.filter_all_scanlines_cpp();


							//console.log('pre save');
							png.save_to_disk(res_path, function() {
								console.log('png saved');
							});
							
						}
						
						
					});
				}
				test_4x4_stripe_save_slf_4();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_4x4_stripe_load_rgba_pixel_buffer
			// -----------------------------------------------------
				
			xit("test_4x4_stripe_load_rgba_pixel_buffer", function(done) {
			
				var test_4x4_stripe_load_rgba_pixel_buffer = function() {
					//get_rgba_pixel_buffer
					//var source_path = './source/4x4_stripe.png';
					var source_path = './source/pngsuite/_32bpp_basn2c08.png';
					// _32bpp_basn2c08
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						console.log('rgba_buffer.buffer.length ' + rgba_buffer.buffer.length);
						//rgba_buffer.interate_pixels(function(x, y, r, g, b, a) {
						//    console.log(x, y, r, g, b, a);
						//})
						// get_pixel

						console.log('rgba_buffer.get_pixel ' + stringify(rgba_buffer.get_pixel(1, 0)));

					})
				}
				test_4x4_stripe_load_rgba_pixel_buffer();
			
			
				assert.equal(11111, 11111);
				done();
			});
						
			// -----------------------------------------------------
			//	test_load_dice_rgba_pb_count_colors
			// -----------------------------------------------------
				
			xit("test_load_dice_rgba_pb_count_colors", function(done) {
			
				var test_load_dice_rgba_pb_count_colors = function() {
					var source_path = './source/dice.png';
					// _32bpp_basn2c08
					jsgui_png.load_pixel_buffer_from_disk(source_path, function(err, rgba_buffer) {
						//console.log('rgba_buffer.buffer.length ' + rgba_buffer.buffer.length);
						//rgba_buffer.interate_pixels(function(x, y, r, g, b, a) {
						//    console.log(x, y, r, g, b, a);
						//})
						// get_pixel

						// Needs pixel buffer processing too.

						var num_colors = pixel_buffer_processing.count_colors(rgba_buffer);
						console.log('num_colors ' + num_colors);
						//console.log('rgba_buffer.get_pixel ' + stringify(rgba_buffer.get_pixel(1, 0)));

					})
				}
				test_load_dice_rgba_pb_count_colors();

				// Load the dice, count the colors
				//  Probably best to count the colors from the RGBA buffer.
				//   A bit more long-winded but allows code to be reused more.
				//    It's not format specific.
			
			
				assert.equal(11111, 11111);
				done();
			});
						
						
		});




        // Load the dice, change to indexed colors, save as indexed palette PNG.




        /*

        jsgui_png.load_from_disk(source_path, function(err, png) {
                if (err) {
                
                } else {
                    
                    //console.log('image loaded');
                    var size = png.size;
                    var color_type = png.color_type;
                    var bit_depth = png.bit_depth;
                
                    console.log('size ' + stringify(size));
                    console.log('scanline_length ' + stringify(png.scanline_length));
                    console.log('color_type ' + stringify(color_type));
                    console.log('bit_depth ' + stringify(bit_depth));
                    
                    // This should work!!!
                    png.set_scanline_filter_all_rows(scanline_filter);
                    
                    png.filter_all_scanlines();
                    //do_iterate();
                
                    //var new_png_path = path.dirname(source_path) + '/' + '_scanline_filter_4_' + path.basename(source_path, '.png') + '.png';
                    //console.log('new_png_path ' + new_png_path);
                
                    png.save_to_disk(dest_path, function() {
                        //console.log('png saved');
                        callback(null, true);
                    });
                }
            });

    */




        // try converting the black background dice to an RGBA image








        
    }
);
